import 'dart:async';
import 'dart:convert';

import 'package:connex/Apis/DashboardApis.dart';
import 'package:connex/Models/brandList_model.dart';
import 'package:connex/Models/congressList_model.dart';
import 'package:connex/Routes/app_routes.dart';
import 'package:connex/controller/home_controller.dart';
import 'package:connex/controller/testing_page.dart';
import 'package:connex/screens/DashBoard.dart/commercial_engagements.dart';
import 'package:connex/screens/DashBoard.dart/institution.dart';
import 'package:connex/screens/DashBoard.dart/kol_overview.dart';
import 'package:connex/screens/DashBoard.dart/medical_engagements.dart';
import 'package:connex/screens/DashBoard.dart/all_engagements.dart';
import 'package:connex/screens/DashBoard.dart/engament_topic_leaderboard.dart';
import 'package:connex/screens/DashBoard.dart/kol_engagement_tracking.dart';
import 'package:connex/screens/peopleone.dart';
import 'package:connex/widgets/bottom_text.dart';
import 'package:connex/widgets/singleSelect.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:pie_chart/pie_chart.dart';
import '../Models/brands_activity.dart';
import '../Models/engagements.dart';
import '../Models/engagements_sort.dart';
import '../Models/pie_chart_data.dart';
import '../Models/pie_data_map.dart';
import 'DashBoard.dart/activity.dart';
import '../widgets/multiselect.dart';
import 'DashBoard.dart/1:1Engagements.dart';
import 'DashBoard.dart/upcoming_activities.dart';
import 'drawer.dart';
import 'DashBoard.dart/kol_engagement_reach.dart';
import 'package:http/http.dart' as http;

// class HomeScreen extends StatefulWidget {
//   const HomeScreen({Key? key}) : super(key: key);

//   @override
//   State<HomeScreen> createState() => _HomeScreenState();
// }

class HomeScreen extends GetView<StoreController> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  bool value = false;
  bool isChecked = false;
  String dropdownvalue = '2022';

  // List of items in our dropdown menu
  var items = [
    '2022',
  ];
  String dropdownvalue2 = 'Select Congress';

  List BrandsName = [
    "Leukemia-Lymphoma",
    "MM Portfolio",
    "Prostate Franchise",
  ];
  List EngagementsName = [
    "Total Engagements",
    "Commercial Engagements",
    "Medical Engagemnts",
  ];
  // List of items in our dropdown menu

  // Color _colorContainer = Colors.white;
  // RxList<Records> _selectedItems = RxList<Records>([]);
  // RxList<CongressRecords> _CongressItems =
  //     RxList<CongressRecords>([CongressRecords(labelC: "Select Congress")]);
  // var congressSelect = "".obs;
  // void congresSelect(String records) {
  //   congressSelect.value = records;
  //   print("congressSelect $congressSelect");
  //   // congressSelect.value.substring(congressSelect.value.length - 4, congressSelect.value.length - 1) + "'" : ""}
  // }

  // var brandFocus = [].obs;
  // void selectedItems(List<Records> data) {
  //   // _selectedItems.clear();
  //   List<Records> data1 = data;
  //   data1.removeWhere((element) =>
  //       element.name == "MM Portfolio" ||
  //       element.name == "Leukemia-Lymphoma" ||
  //       element.name == "Prostate Franchise");
  //   brandFocus.clear();
  //   print("brandFocus1 $data1");
  //   brandFocus += data1;

  //   print("brandFocus2 ${brandFocus}");
  // }

  // void removeData(Records selectedItem) {
  //   brandFocus.remove(selectedItem);
  //   if (brandFocus.length == 0) {
  //     _getBrandList();
  //   }
  // }

  Autogenerated? _brandLists;
  CongressList? _congressList;
  // final RxList<Records> brands = RxList<Records>([]);
  _getBrandList(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,Name,(Select%20Id,Name%20from%20KOL_Focus_Masters__r)from%20KOL_Brand_Master__c%20where%20Id%20IN%20(Select%20Brand_Master__c%20from%20KOL_Employee_Brand__c%20where%20Employee__r.Employee__c%20=%20%270053Z00000LOFbRQAX%27)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQIwJ8_gMZAefetee35zchEEQSBXGiwFILUeJirHUkLcrSmPHbrPdzZfDiHySnn3u8gdjaJR7HgW5hSw.3tes84hg9zVZ'
      },
    );
    controller.selectedItems.clear();
    // print("response ${response.body}");
    _brandLists = Autogenerated.fromJson(jsonDecode(response.body));
    // print(
    //     "_brandLists ${_brandLists!.records![0].kOLFocusMastersR!.records![0].name}");
    _brandLists!.records!.forEach((element) {
      controller.selectedItems.add(element);
    });

    _brandLists!.records!.forEach((element) {
      controller.brands.add(element);
    });
    _congressList = await DashBoardApi.getCongressList(context);
    return controller.selectedItems;

    // print("_brandLists ${_brandLists.records![0].name}");
  }

  _getCongressList() async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Label__c%20from%20Congress__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQIwJ8_gMZAefetee35zchEEQSBXGiwFILUeJirHUkLcrSmPHbrPdzZfDiHySnn3u8gdjaJR7HgW5hSw.3tes84hg9zVZ'
      },
    );
    print("response ${response.body}");
    _congressList = CongressList.fromJson(jsonDecode(response.body));

    return controller.congressItems;
  }

  void _showMultiSelect(BuildContext context) async {
    final List<Records>? results = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return MultiSelect(
          brandsFocus: controller.brandsFocus,
          brands: controller.brands,
          selectedItems: controller.selectedItems,
          brandsName: controller.BrandsName,
        );
      },
    );
    if (results != null) {
      // print("_selectedItems2 $_selectedItems");
      // print("results $results");
      // selectedItems(results);
    }
  }

  void _showSingleSelect(context) async {
    _congressList!.records!.forEach((element) {
      controller.congressItems.add(element);
    });

    final List<CongressRecords>? results = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return SingleSelect(
          congress: controller.congressItems,
        );
      },
    );

    if (results != null) {
      print("results $results");

      controller.congress.clear();
      controller.congress.add(results[0]);
      print("controller.congress ${controller.congress}");
      // congresSelect(results[0].id!);
      // print("_CongressItems ${_CongressItems[0].id}");
    }
    // print("results ${results![0].labelC}");
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;

    return Scaffold(
      key: _scaffoldKey,
      resizeToAvoidBottomInset: false,
      // backgroundColor: Colors.grey,
      backgroundColor: Color(0xffededeb),

      drawer: const AppDrawer(),
      body: PreferredSize(
        preferredSize: size,
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                // height: _selectedItems.length < 3 ? 250 : 300,
                width: MediaQuery.of(context).size.width,
                padding: EdgeInsets.only(top: 70),
                color: Color(0xFF05357c),
                child: Column(
                  children: [
                    Row(
                      children: [
                        SizedBox(
                          width: 20,
                        ),
                        InkWell(
                          onTap: () {
                            _scaffoldKey.currentState!.openDrawer();
                          },
                          child: Icon(
                            Icons.menu,
                            color: Colors.white,
                            size: 35,
                          ),
                        ),
                        SizedBox(
                          width: 50,
                        ),
                        Container(
                          width: size.width * 0.5,
                          child: Image.network(
                            "https://s3.amazonaws.com/static.evolutionmedcom.com/JanssenKOL-photos/360Connexglobal.png",
                          ),
                        ),
                      ],
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        InkWell(
                          onTap: () {
                            _showMultiSelect(context);
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(10.0),
                            child: Container(
                                margin:
                                    EdgeInsets.only(left: size.width * 0.025),
                                height: 35,
                                width: size.width * 0.32,
                                decoration: const BoxDecoration(
                                  color: Color.fromARGB(
                                      255, 255, 255, 255), //<-- SEE HERE
                                ),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: const [
                                    Text(
                                      "Search",
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 15,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    SizedBox(
                                      width: 20,
                                    ),
                                    Icon(
                                      Icons.keyboard_arrow_down,
                                      color: Colors.black,
                                    ),
                                  ],
                                )),
                          ),
                        ),
                      ],
                    ),
                    FutureBuilder(
                        future: _getBrandList(context),
                        builder:
                            (BuildContext context, AsyncSnapshot snapshot) {
                          return Obx(
                            () => Wrap(
                              children: List.generate(
                                controller.selectedItems.length,
                                (index) {
                                  return Container(
                                    margin:
                                        EdgeInsets.only(bottom: 10, right: 5),
                                    // height: 40,
                                    width: 200,
                                    decoration: const BoxDecoration(
                                        color:
                                            Color.fromARGB(255, 201, 195, 195),
                                        borderRadius: BorderRadius.all(
                                            Radius.circular(20))),
                                    child: Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Expanded(
                                            child: Text(
                                              controller
                                                  .selectedItems[index].name!,
                                              style: const TextStyle(
                                                  color: Colors.black,
                                                  fontWeight: FontWeight.w500),
                                            ),
                                          ),
                                          InkWell(
                                            onTap: () {
                                              // if (controller.brandsFocus
                                              //     .contains(controller
                                              //         .selectedItems[index])) {

                                              if (controller.brandsFocus.any(
                                                  (element) =>
                                                      element.name ==
                                                      controller
                                                          .selectedItems[index]
                                                          .name)) {
                                                controller.brandsFocus.remove(
                                                    controller
                                                        .selectedItems[index]);
                                              }
                                              if (controller.BrandsName.any(
                                                  (element) =>
                                                      element ==
                                                      controller
                                                          .selectedItems[index]
                                                          .name)) {
                                                print("BrandsName ");
                                                controller.BrandsName.remove(
                                                    controller
                                                        .selectedItems[index]
                                                        .name);
                                                print(
                                                    "BrandsName ${controller.BrandsName}");
                                              }
                                              controller.selectedItems.remove(
                                                  controller
                                                      .selectedItems[index]);
                                              // controller.brandsFocus.remove(
                                              //     controller
                                              //         .selectedItems[index]);
                                              // }
                                              // print(
                                              // "_selectedItems $_selectedItems");
                                              // if (_selectedItems[index].name ==
                                              //         "MM PortFolio" ||
                                              //     _selectedItems[index].name ==
                                              //         "Leukemia-lymphoma" ||
                                              //     _selectedItems[index].name ==
                                              //         "Prostate Franchise") {
                                              // removeData(_selectedItems[index]);

                                              // _selectedItems.remove(
                                              //     _selectedItems[index]);
                                              // print(
                                              //     "_selectedItems $_selectedItems");
                                            },
                                            child: const Icon(
                                              Icons.cancel_outlined,
                                              color: Color(0xFF05357c),
                                            ),
                                          )
                                        ],
                                      ),
                                    ),

                                    // onSelected: (val) {},
                                  );
                                },
                              ),
                            ),
                          );
                        }),
                  ],
                ),
              ),
              _dashBoard(context, size),

              const SizedBox(height: 10),
              AllEngagemets(),
              // Obx(() => AllEngagements(brandFocus, congressSelect)),
              // const SizedBox(height: 10),
              // CommercialEngagements(),
              // // const SizedBox(height: 10),
              // MedicalEngagements(),

              const SizedBox(height: 10),
              KolOverview(),

              const SizedBox(height: 10),
              kolInstitution(),

              const SizedBox(
                height: 10,
              ),
              // Obx(() => _activity(brandFocus)),
              Activity(),
              const SizedBox(height: 10),
              // Obx(() => _kolEngagementReach(brandFocus)),
              KolEngagemetReach(),

              const SizedBox(height: 10),
              KolEngagemetTracking(),

              const SizedBox(height: 10),
              EngagementTopicLeaderBoard(),

              const SizedBox(
                height: 10,
              ),
              MeetingEngagements(),

              const SizedBox(
                height: 10,
              ),
              UpcomingActivities(),
              const SizedBox(
                height: 10,
              ),
              const BottomText(),
              const SizedBox(
                height: 30,
              ),
              // TabWidget(),
            ],
          ),
        ),
      ),
    );
  }

  _dashBoard(BuildContext context, Size size) {
    // print("brandFocusRxList $brandFocus");
    return Obx(
      () => Container(
        height: 280,
        width: MediaQuery.of(context).size.width,
        color: Colors.white,
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 10),
              Center(
                  child: InkWell(
                onTap: () {
                  Get.toNamed(Routes.HOMESCREEN);
                },
                child: Text(
                  "Dashboard",
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
              )),
              Row(
                children: [
                  Checkbox(
                    value: controller.myValue.value,
                    activeColor: Theme.of(context).colorScheme.primary,
                    onChanged: (bool? newValue) {
                      controller.upateMyValue();
                      print(controller.myValue);
                    },
                  ),
                  Text(
                    "My View ",
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w400,
                    ),
                  )
                ],
              ),
              Text(
                "Date Range:",
                style: TextStyle(fontWeight: FontWeight.w500, fontSize: 16),
              ),
              Container(
                margin: EdgeInsets.all(10),
                padding: EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                decoration: BoxDecoration(
                    border: Border.all(
                  color: Colors.black,
                  width: 1,
                )),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton(
                    // Initial Value
                    isExpanded: true,
                    value: dropdownvalue,

                    // Down Arrow Icon
                    icon: const Icon(Icons.keyboard_arrow_down),

                    // Array list of items
                    items: items.map((String items) {
                      return DropdownMenuItem(
                        value: items,
                        child: Text(items),
                      );
                    }).toList(),
                    // After selecting the desired option,it will
                    // change button value to selected value
                    onChanged: (String? newValue) {
                      // setState(() {
                      //   dropdownvalue = newValue!;
                      // });
                    },
                  ),
                ),
              ),
              Container(
                margin: EdgeInsets.all(10),
                padding: EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                decoration: BoxDecoration(
                    border: Border.all(
                  color: Colors.black,
                  width: 1,
                )),
                child: InkWell(
                  onTap: () {
                    _showSingleSelect(context);
                  },
                  child: Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Container(
                        margin: EdgeInsets.only(left: size.width * 0.025),
                        // height: 35,
                        // width: size.width * 0.32,
                        decoration: const BoxDecoration(
                          color:
                              Color.fromARGB(255, 255, 255, 255), //<-- SEE HERE
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              controller.congress.length == 0
                                  ? "Select Congress"
                                  : controller.congress[0].labelC!,
                              style: const TextStyle(
                                color: Colors.black,
                                fontSize: 15,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            const SizedBox(
                              width: 20,
                            ),
                            const Icon(
                              Icons.keyboard_arrow_down,
                              color: Colors.black,
                            ),
                          ],
                        )),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
