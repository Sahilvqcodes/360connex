import 'dart:async';
import 'dart:convert';

import 'package:connex/Apis/DashboardApis.dart';
import 'package:connex/Models/brandList_model.dart';
import 'package:connex/Models/congressList_model.dart';
import 'package:connex/screens/DashBoard.dart/commercial_engagements.dart';
import 'package:connex/screens/DashBoard.dart/institution.dart';
import 'package:connex/screens/DashBoard.dart/kol_overview.dart';
import 'package:connex/screens/DashBoard.dart/medical_engagements.dart';
import 'package:connex/screens/DashBoard.dart/total_engagements.dart';
import 'package:connex/screens/DashBoard.dart/engament_topic_leaderboard.dart';
import 'package:connex/screens/DashBoard.dart/kol_engagement_tracking.dart';
import 'package:connex/screens/peopleone.dart';
import 'package:connex/widgets/singleSelect.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'DashBoard.dart/activity.dart';
import '../widgets/multiselect.dart';
import 'DashBoard.dart/1:1Engagements.dart';
import 'DashBoard.dart/upcoming_activities.dart';
import 'drawer.dart';
import 'DashBoard.dart/kol_engagement_reach.dart';
import 'package:http/http.dart' as http;

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  bool value = false;
  bool isChecked = false;
  String dropdownvalue = '2022';

  // List of items in our dropdown menu
  var items = [
    '2024',
    '2023',
    '2022',
  ];
  String dropdownvalue2 = 'Select Congress';

  // List of items in our dropdown menu

  // Color _colorContainer = Colors.white;
  RxList<Records> _selectedItems = RxList<Records>([]);
  RxList<CongressRecords> _CongressItems =
      RxList<CongressRecords>([CongressRecords(labelC: "Select Congress")]);
  // void selectedItems(List<Records> data) {
  //   _selectedItems.clear();
  //   print("data $data");
  //   data.forEach((element) {
  //     _selectedItems.value.add(element);
  //     _selectedItems.forEach(
  //       (element1) {
  //         print("_selectedItems ${element1.name}}");
  //       },
  //     );
  //     // print("_selectedItems ${_selectedItems[3].name}");
  //   });
  // }

  @override
  void initState() {
    super.initState();
  }

  Autogenerated? _brandLists;
  CongressList? _congressList;
  _getBrandList() async {
    _selectedItems.clear();
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,Name,(Select%20Id,Name%20from%20KOL_Focus_Masters__r)from%20KOL_Brand_Master__c%20where%20Id%20IN%20(Select%20Brand_Master__c%20from%20KOL_Employee_Brand__c%20where%20Employee__r.Employee__c%20=%20%270053Z00000LOFbRQAX%27)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQJht818TxKnxPLcxCmKbqWSBwYlhl3CpUOAl7GAV4YEUiXt6XbxWTYUBiBC6shXgt68sn_G_lbq04FfOjFP08_r_Cb5s'
      },
    );
    // print("response ${response.body}");
    _brandLists = Autogenerated.fromJson(jsonDecode(response.body));
    // print(
    //     "_brandLists ${_brandLists!.records![0].kOLFocusMastersR!.records![0].name}");
    _brandLists!.records!.forEach((element) {
      _selectedItems.add(element);
    });
    return _selectedItems;

    // print("_brandLists ${_brandLists.records![0].name}");
  }

  _getCongressList() async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Label__c%20from%20Congress__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQE7Dv4NG9SLNdIiA_bdEVfdxG5HhC5vzEET514..L0Szkd15JUu3sX6oOM7j1taiOP4YlBMtlo0G.YOnZNEQx2.LXhcS'
      },
    );
    print("response ${response.body}");
    _congressList = CongressList.fromJson(jsonDecode(response.body));
    _congressList!.records!.forEach((element) {
      _CongressItems.add(element);
    });
    return _CongressItems;
  }

  void _showMultiSelect() async {
    final List<Records> brands = [];

    _brandLists!.records!.forEach((element) {
      brands.add(element);
    });

    final List<Records>? results = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return MultiSelect(
          brands: brands,
          selectedItems: _selectedItems,
        );
      },
    );
  }

  void _showSingleSelect() async {
    final List<CongressRecords> congress = [];
    _congressList = await DashBoardApi.getCongressList(context);
    _congressList!.records!.forEach((element) {
      congress.add(element);
    });

    final List<CongressRecords>? results = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return SingleSelect(
          congress: congress,
        );
      },
    );
    if (results != null) {
      _CongressItems.clear();
      _CongressItems.add(results[0]);
      print("_CongressItems ${_CongressItems[0].labelC}");
    }
    // print("results ${results![0].labelC}");
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;

    return Scaffold(
      key: _scaffoldKey,
      resizeToAvoidBottomInset: false,
      // backgroundColor: Colors.grey,
      backgroundColor: Color(0xffededeb),

      drawer: const AppDrawer(),
      body: PreferredSize(
        preferredSize: size,
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                // height: _selectedItems.length < 3 ? 250 : 300,
                width: MediaQuery.of(context).size.width,
                padding: EdgeInsets.only(top: 70),
                color: Color(0xFF05357c),
                child: Column(
                  children: [
                    Row(
                      children: [
                        SizedBox(
                          width: 20,
                        ),
                        InkWell(
                          onTap: () {
                            _scaffoldKey.currentState!.openDrawer();
                          },
                          child: Icon(
                            Icons.menu,
                            color: Colors.white,
                            size: 35,
                          ),
                        ),
                        SizedBox(
                          width: 50,
                        ),
                        Container(
                          width: size.width * 0.5,
                          child: Image.network(
                            "https://s3.amazonaws.com/static.evolutionmedcom.com/JanssenKOL-photos/360Connexglobal.png",
                          ),
                        ),
                      ],
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        InkWell(
                          onTap: _showMultiSelect,
                          child: Padding(
                            padding: const EdgeInsets.all(10.0),
                            child: Container(
                                margin:
                                    EdgeInsets.only(left: size.width * 0.025),
                                height: 35,
                                width: size.width * 0.32,
                                decoration: const BoxDecoration(
                                  color: Color.fromARGB(
                                      255, 255, 255, 255), //<-- SEE HERE
                                ),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: const [
                                    Text(
                                      "Search",
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 15,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    SizedBox(
                                      width: 20,
                                    ),
                                    Icon(
                                      Icons.keyboard_arrow_down,
                                      color: Colors.black,
                                    ),
                                  ],
                                )),
                          ),
                        ),
                      ],
                    ),
                    FutureBuilder(
                        future: _getBrandList(),
                        builder:
                            (BuildContext context, AsyncSnapshot snapshot) {
                          return Obx(
                            () => Wrap(
                              children: List.generate(
                                _selectedItems.length,
                                (index) {
                                  return Container(
                                    margin:
                                        EdgeInsets.only(bottom: 10, right: 5),
                                    // height: 40,
                                    width: 200,
                                    decoration: const BoxDecoration(
                                        color:
                                            Color.fromARGB(255, 201, 195, 195),
                                        borderRadius: BorderRadius.all(
                                            Radius.circular(20))),
                                    child: Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Expanded(
                                            child: Text(
                                              _selectedItems[index].name!,
                                              style: const TextStyle(
                                                  color: Colors.black,
                                                  fontWeight: FontWeight.w500),
                                            ),
                                          ),
                                          InkWell(
                                            onTap: () {
                                              print(
                                                  "_selectedItems $_selectedItems");
                                              _selectedItems.remove(
                                                  _selectedItems[index]);
                                              print(
                                                  "_selectedItems $_selectedItems");
                                            },
                                            child: const Icon(
                                              Icons.cancel_outlined,
                                              color: Color(0xFF05357c),
                                            ),
                                          )
                                        ],
                                      ),
                                    ),

                                    // onSelected: (val) {},
                                  );
                                },
                              ),
                            ),
                          );
                        }),
                  ],
                ),
              ),
              _dashBoard(size),
              const SizedBox(height: 10),
              TotalEngagements(),
              const SizedBox(height: 10),
              CommercialEngagements(),
              const SizedBox(height: 10),
              MedicalEngagements(),

              const SizedBox(height: 10),
              KolOverview(),

              const SizedBox(height: 10),
              kolInstitution(),

              const SizedBox(
                height: 10,
              ),
              const Activity(),
              const SizedBox(height: 10),
              KolEngagemetReach(),

              const SizedBox(height: 10),
              KolEngagemetTracking(),

              const SizedBox(height: 10),
              EngagementTopicLeaderBoard(),

              const SizedBox(
                height: 10,
              ),
              MeetingEngagements(),

              const SizedBox(
                height: 10,
              ),
              UpcomingActivities()

              // TabWidget(),
            ],
          ),
        ),
      ),
    );
  }

  _dashBoard(Size size) {
    return Obx(
      () => Container(
        height: 280,
        width: MediaQuery.of(context).size.width,
        color: Colors.white,
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 10),
              const Center(
                  child: Text(
                "Dashboard",
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              )),
              Row(
                children: [
                  Checkbox(
                    value: this.value,
                    activeColor: Theme.of(context).colorScheme.primary,
                    onChanged: (bool? newValue) {
                      setState(() {
                        this.value = newValue!;
                        isChecked = true;
                      });
                    },
                  ),
                  const Text(
                    "My View",
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w400,
                    ),
                  )
                ],
              ),
              Text(
                "Date Range:",
                style: TextStyle(fontWeight: FontWeight.w500, fontSize: 16),
              ),
              Container(
                margin: EdgeInsets.all(10),
                padding: EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                decoration: BoxDecoration(
                    border: Border.all(
                  color: Colors.black,
                  width: 1,
                )),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton(
                    // Initial Value
                    isExpanded: true,
                    value: dropdownvalue,

                    // Down Arrow Icon
                    icon: const Icon(Icons.keyboard_arrow_down),

                    // Array list of items
                    items: items.map((String items) {
                      return DropdownMenuItem(
                        value: items,
                        child: Text(items),
                      );
                    }).toList(),
                    // After selecting the desired option,it will
                    // change button value to selected value
                    onChanged: (String? newValue) {
                      setState(() {
                        dropdownvalue = newValue!;
                      });
                    },
                  ),
                ),
              ),
              Container(
                margin: EdgeInsets.all(10),
                padding: EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                decoration: BoxDecoration(
                    border: Border.all(
                  color: Colors.black,
                  width: 1,
                )),
                child: InkWell(
                  onTap: _showSingleSelect,
                  child: Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Container(
                        margin: EdgeInsets.only(left: size.width * 0.025),
                        // height: 35,
                        // width: size.width * 0.32,
                        decoration: const BoxDecoration(
                          color:
                              Color.fromARGB(255, 255, 255, 255), //<-- SEE HERE
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              _CongressItems[0].labelC ?? "",
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 15,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            SizedBox(
                              width: 20,
                            ),
                            Icon(
                              Icons.keyboard_arrow_down,
                              color: Colors.black,
                            ),
                          ],
                        )),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
