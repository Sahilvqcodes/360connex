import 'dart:convert';

import 'package:connex/controller/home_controller.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get/get_state_manager/src/simple/get_view.dart';

import '../Apis/Dashboard/apis/dashboardApis.dart';
import '../Apis/Dashboard/models/brandList_model.dart';
import 'multiselect.dart';
import 'package:http/http.dart' as http;

class NavBar extends GetView<StoreController> {
  NavBar({super.key});
  // final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  void _showMultiSelect(BuildContext context) async {
    final List<Records>? results = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return MultiSelect();
      },
    );
    if (results != null) {}
  }

  _getBrandList(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,Name,(Select%20Id,Name%20from%20KOL_Focus_Masters__r)from%20KOL_Brand_Master__c%20where%20Id%20IN%20(Select%20Brand_Master__c%20from%20KOL_Employee_Brand__c%20where%20Employee__r.Employee__c%20=%20%270053Z00000LOFbRQAX%27)";
    // print(url);
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQC94lOENWuhvAa8bkIf7JPzI6GJ8DHUM8WuzMbjlNxSJGoVgvq1v8LIvxQkQOzu1HzCZAUAD1rbwmYd4DejopSGH1dsf'
      },
    );
    controller.selectedItems.clear();
    controller.brands.clear();
    // print("length ${controller.selectedItems.length}");
    // print("response ${response.body}");
    Autogenerated _brandLists =
        Autogenerated.fromJson(jsonDecode(response.body));
    // print(
    //     "_brandLists ${_brandLists!.records![0].kOLFocusMastersR!.records![0].name}");
    _brandLists!.records!.forEach((element) {
      if (controller.selectedItems.contains(element) == false) {
        // print(controller.selectedItems.contains(element));
        controller.selectedItems.add(element);
      }
    });
    // print("length 1 ${controller.selectedItems.length}");
    _brandLists!.records!.forEach((element) {
      controller.brands.add(element);
    });
    // _congressList = await DashBoardApi.getCongressList(context);
    return controller.selectedItems;

    // print("_brandLists ${_brandLists.records![0].name}");
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Container(
      // height: _selectedItems.length < 3 ? 250 : 300,
      width: MediaQuery.of(context).size.width,
      padding: EdgeInsets.only(top: 70),
      color: Color(0xFF05357c),
      child: Column(
        children: [
          Row(
            children: [
              SizedBox(
                width: 20,
              ),
              InkWell(
                onTap: () {
                  Scaffold.of(context).openDrawer();
                },
                child: const Icon(
                  Icons.menu,
                  color: Colors.white,
                  size: 35,
                ),
              ),
              const SizedBox(
                width: 50,
              ),
              Container(
                width: size.width * 0.5,
                child: Image.network(
                  "https://s3.amazonaws.com/static.evolutionmedcom.com/JanssenKOL-photos/360Connexglobal.png",
                ),
              ),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              InkWell(
                onTap: () {
                  _showMultiSelect(context);
                },
                child: Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Container(
                      margin: EdgeInsets.only(left: size.width * 0.025),
                      height: 35,
                      width: size.width * 0.32,
                      decoration: const BoxDecoration(
                        color:
                            Color.fromARGB(255, 255, 255, 255), //<-- SEE HERE
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: const [
                          Text(
                            "Search",
                            style: TextStyle(
                              color: Colors.black,
                              fontSize: 15,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          SizedBox(
                            width: 20,
                          ),
                          Icon(
                            Icons.keyboard_arrow_down,
                            color: Colors.black,
                          ),
                        ],
                      )),
                ),
              ),
            ],
          ),
          FutureBuilder(
              future: _getBrandList(context),
              builder: (BuildContext context, AsyncSnapshot snapshot) {
                return Obx(
                  () => Wrap(
                    children: List.generate(
                      controller.selectedItems.length,
                      (index) {
                        return Container(
                          margin: EdgeInsets.only(bottom: 10, right: 5),
                          // height: 40,
                          width: 200,
                          decoration: const BoxDecoration(
                              color: Color.fromARGB(255, 201, 195, 195),
                              borderRadius:
                                  BorderRadius.all(Radius.circular(20))),
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Expanded(
                                  child: Text(
                                    controller.selectedItems[index].name!,
                                    style: const TextStyle(
                                        color: Colors.black,
                                        fontWeight: FontWeight.w500),
                                  ),
                                ),
                                InkWell(
                                  onTap: () {
                                    // if (controller.brandsFocus
                                    //     .contains(controller
                                    //         .selectedItems[index])) {

                                    if (controller.brandsFocus.any((element) =>
                                        element.name ==
                                        controller.selectedItems[index].name)) {
                                      controller.brandsFocus.remove(
                                          controller.selectedItems[index]);
                                    }
                                    if (controller.BrandsName.any((element) =>
                                        element ==
                                        controller.selectedItems[index].name)) {
                                      controller.BrandsName.remove(
                                          controller.selectedItems[index].name);
                                      controller.selectedItems[index]
                                          .kOLFocusMastersR!.records!
                                          .forEach((element) {
                                        if (controller.brandsFocus
                                                .contains(element) ==
                                            true) {
                                          controller.brandsFocus
                                              .remove(element);
                                          controller.selectedItems
                                              .remove(element);
                                        }
                                      });
                                    }
                                    controller.selectedItems.remove(
                                        controller.selectedItems[index]);
                                    // controller.brandsFocus.remove(
                                    //     controller
                                    //         .selectedItems[index]);
                                    // }
                                    // print(
                                    // "_selectedItems $_selectedItems");
                                    // if (_selectedItems[index].name ==
                                    //         "MM PortFolio" ||
                                    //     _selectedItems[index].name ==
                                    //         "Leukemia-lymphoma" ||
                                    //     _selectedItems[index].name ==
                                    //         "Prostate Franchise") {
                                    // removeData(_selectedItems[index]);

                                    // _selectedItems.remove(
                                    //     _selectedItems[index]);
                                    // print(
                                    //     "_selectedItems $_selectedItems");
                                  },
                                  child: const Icon(
                                    Icons.cancel_outlined,
                                    color: Color(0xFF05357c),
                                  ),
                                )
                              ],
                            ),
                          ),

                          // onSelected: (val) {},
                        );
                      },
                    ),
                  ),
                );
              }),
        ],
      ),
    );
  }
}
