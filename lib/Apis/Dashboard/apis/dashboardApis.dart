import 'dart:convert';
import 'package:connex/screens/DashBoard.dart/kol_overview.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';

import '../models/1:1_and_activities.dart';
import '../models/Kol_overview.dart';

import '../models/brandList_model.dart';
import '../models/brands_activity.dart';
import '../models/congressList_model.dart';
import '../models/engagements.dart';
import '../models/engagements_sort.dart';
import '../models/pie_chart_data.dart';
import '../models/pie_data_map.dart';
import '../models/total_leaderboard.dart';

class DashBoardApi {
  static getCongressList(BuildContext context) async {
    Autogenerated? _brandLists;
    CongressList? _congressList;
    RxList<Records> _selectedItems = RxList<Records>([]);
    RxList<CongressRecords> _CongressItems =
        RxList<CongressRecords>([CongressRecords(labelC: "Select Congress")]);

    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Label__c%20from%20Congress__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("response ${response.body}");
    _congressList = CongressList.fromJson(jsonDecode(response.body));

    return _congressList;
  }

  static getTotalEngagements(
      BuildContext context,
      RxList<CongressRecords> congress,
      RxList brandFocus,
      RxBool myValue,
      RxList<String> brandsName) async {
    var queryParams1 = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 = "Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Focus_Master__r.Name = '${brandFocus[i].name}' ";
      }
    }
    String? url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK'  and Brand_Master__r.Name != ''${congress.length != 0 ? "AND Congress__c = '" + congress[0].id!.substring(0, congress[0].id!.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''}AND ID IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR')  GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name)";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK'  and Brand_Master__r.Name != ''${congress.length != 0 ? "AND Congress__c = '" + congress[0].id!.substring(0, congress[0].id!.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name)";
    }

    // print("urlurl $url");
    //     "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK'  and Brand_Master__r.Name != ' '${congressSelect.value.length != 0 ? "AND Congress__c = '" + congressSelect.value.substring(0, congressSelect.value.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name)";
    // "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Brand_Master__r.Name%20!=%20%27%27%${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''}20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var encoded = Uri.encodeFull(url);
    // print("encoded $encoded");
    var response = await http.get(
      Uri.parse(encoded),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getTotalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // print("_mmPortfolio1 $_mmPortfolio");

    List<AllData> listAllData = [
      // if (leukemia_lymphoma.length != 0)
      //   AllData(id: 1, recordsList: leukemia_lymphoma),
      // // : AllData(id: 1, recordsList: null),
      // if (_mmPortfolio.length != 0) AllData(id: 2, recordsList: _mmPortfolio),
      // // : AllData(id: 2, recordsList: null),
      // if (prostate_franchise.length != 0)
      //   AllData(id: 3, recordsList: prostate_franchise)
      // : AllData(id: 3, recordsList: null),
    ];

    if (brandFocus.length == 0) {
      for (int i = 0; i < brandsName.length; i++) {
        if (leukemia_lymphoma.length != 0 &&
            brandsName[i] == leukemia_lymphoma[0].name) {
          listAllData.add(AllData(id: 1, recordsList: leukemia_lymphoma));
        } else if (_mmPortfolio.length != 0 &&
            brandsName[i] == _mmPortfolio[0].name) {
          listAllData.add(AllData(id: 2, recordsList: _mmPortfolio));
        } else if (prostate_franchise.length != 0 &&
            brandsName[i] == prostate_franchise[0].name) {
          listAllData.add(AllData(id: 3, recordsList: prostate_franchise));
        }
      }
    } else {
      for (int i = 0; i < 1; i++) {
        if (leukemia_lymphoma.length != 0) {
          if (brandsName.any((p0) => p0 == leukemia_lymphoma[0].name) == true) {
            listAllData.add(AllData(id: 1, recordsList: leukemia_lymphoma));
          }
        }
        if (_mmPortfolio.length != 0) {
          if (brandsName.any((p0) => p0 == _mmPortfolio[0].name) == true) {
            listAllData.add(AllData(id: 2, recordsList: _mmPortfolio));
          }
        }
        if (prostate_franchise.length != 0) {
          if (brandsName.any((p0) => p0 == prostate_franchise[0].name) ==
              true) {
            listAllData.add(AllData(id: 3, recordsList: prostate_franchise));
          }
        }
      }
    }

    // print(listAllData[0].recordsList![0].name);
    // _data![0].brandRecords!.add(_mmPortfolio![0]);
    // _data!.add()
    // _data!.add(_mmPortfolio);
    return listAllData;
  }

  static getCommercialEngagements(
      BuildContext context,
      RxList<CongressRecords> congress,
      RxList brandFocus,
      RxBool myValue,
      RxList<String> brandsName) async {
    var queryParams1 = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 = "Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Focus_Master__r.Name = '${brandFocus[i].name}' ";
      }
    }
    String? url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Engagement_Type__c = 'Commercial'${congress.length != 0 ? "AND Congress__c = '" + congress[0].id!.substring(0, congress[0].id!.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''}AND ID IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name) ";
    }
    {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Engagement_Type__c = 'Commercial'${congress.length != 0 ? "AND Congress__c = '" + congress[0].id!.substring(0, congress[0].id!.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name) ";
    }

    // "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id)engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Engagement_Type__c = 'Commercial' ${congressSelect.value.length != 0 ? "AND Congress__c = '" + congressSelect.value.substring(0, congressSelect.value.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name) ";
    var encoded = Uri.encodeFull(url);
    // print("encoded $encoded");
    var response = await http.get(
      Uri.parse(encoded),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getCommercialEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      // leukemia_lymphoma.length != 0
      //     ? AllData(id: 1, recordsList: leukemia_lymphoma)
      //     : AllData(id: 1, recordsList: null),
      // _mmPortfolio.length != 0
      //     ? AllData(id: 2, recordsList: _mmPortfolio)
      //     : AllData(id: 2, recordsList: null),
      // prostate_franchise.length != 0
      //     ? AllData(id: 3, recordsList: prostate_franchise)
      //     : AllData(id: 3, recordsList: null),
    ];
    if (brandFocus.length == 0) {
      for (int i = 0; i < brandsName.length; i++) {
        if (leukemia_lymphoma.length != 0 &&
            brandsName[i] == leukemia_lymphoma[0].name) {
          listAllData.add(AllData(id: 1, recordsList: leukemia_lymphoma));
        } else if (_mmPortfolio.length != 0 &&
            brandsName[i] == _mmPortfolio[0].name) {
          listAllData.add(AllData(id: 2, recordsList: _mmPortfolio));
        } else if (prostate_franchise.length != 0 &&
            brandsName[i] == prostate_franchise[0].name) {
          listAllData.add(AllData(id: 3, recordsList: prostate_franchise));
        }
      }
    } else {
      for (int i = 0; i < 1; i++) {
        if (leukemia_lymphoma.length != 0) {
          if (brandsName.any((p0) => p0 == leukemia_lymphoma[0].name) == true) {
            listAllData.add(AllData(id: 1, recordsList: leukemia_lymphoma));
          }
        }
        if (_mmPortfolio.length != 0) {
          if (brandsName.any((p0) => p0 == _mmPortfolio[0].name) == true) {
            listAllData.add(AllData(id: 2, recordsList: _mmPortfolio));
          }
        }
        if (prostate_franchise.length != 0) {
          if (brandsName.any((p0) => p0 == prostate_franchise[0].name) ==
              true) {
            listAllData.add(AllData(id: 3, recordsList: prostate_franchise));
          }
        }
      }
    }

    return listAllData;
  }

  static getMedicalEngagements(
      BuildContext context,
      RxList<CongressRecords> congress,
      RxList brandFocus,
      RxBool myValue,
      RxList<String> brandsName) async {
    var queryParams1 = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 = "Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Focus_Master__r.Name = '${brandFocus[i].name}' ";
      }
    }
    String? url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Engagement_Type__c = 'Medical'${congress.length != 0 ? "AND Congress__c = '" + congress[0].id!.substring(0, congress[0].id!.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''}AND ID IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name) ";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id) engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Engagement_Type__c = 'Medical'${congress.length != 0 ? "AND Congress__c = '" + congress[0].id!.substring(0, congress[0].id!.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name) ";
    }
    // "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Brand_Master__r.Name, COUNT(id)engs, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) FROM Master_Enagement__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Engagement_Type__c = 'Medical' ${congressSelect.value.length != 0 ? "AND Congress__c = '" + congressSelect.value.substring(0, congressSelect.value.length - 3) + "'" : ""} ${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} GROUP BY Brand_Master__r.Name, CALENDAR_QUARTER(Engagement_Date__c), CALENDAR_YEAR(Engagement_Date__c) ORDER BY GROUPING(Brand_Master__r.Name) ";
    var encoded = Uri.encodeFull(url);
    // print("encoded $encoded");
    var response = await http.get(
      Uri.parse(encoded),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getMedicalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      // leukemia_lymphoma.length != 0
      //     ? AllData(id: 1, recordsList: leukemia_lymphoma)
      //     : AllData(id: 1, recordsList: null),
      // _mmPortfolio.length != 0
      //     ? AllData(id: 2, recordsList: _mmPortfolio)
      //     : AllData(id: 2, recordsList: null),
      // prostate_franchise.length != 0
      //     ? AllData(id: 3, recordsList: prostate_franchise)
      //     : AllData(id: 3, recordsList: null),
    ];
    if (brandFocus.length == 0) {
      for (int i = 0; i < brandsName.length; i++) {
        if (leukemia_lymphoma.length != 0 &&
            brandsName[i] == leukemia_lymphoma[0].name) {
          listAllData.add(AllData(id: 1, recordsList: leukemia_lymphoma));
        } else if (_mmPortfolio.length != 0 &&
            brandsName[i] == _mmPortfolio[0].name) {
          listAllData.add(AllData(id: 2, recordsList: _mmPortfolio));
        } else if (prostate_franchise.length != 0 &&
            brandsName[i] == prostate_franchise[0].name) {
          listAllData.add(AllData(id: 3, recordsList: prostate_franchise));
        }
      }
    } else {
      for (int i = 0; i < 1; i++) {
        if (leukemia_lymphoma.length != 0) {
          if (brandsName.any((p0) => p0 == leukemia_lymphoma[0].name) == true) {
            listAllData.add(AllData(id: 1, recordsList: leukemia_lymphoma));
          }
        }
        if (_mmPortfolio.length != 0) {
          if (brandsName.any((p0) => p0 == _mmPortfolio[0].name) == true) {
            listAllData.add(AllData(id: 2, recordsList: _mmPortfolio));
          }
        }
        if (prostate_franchise.length != 0) {
          if (brandsName.any((p0) => p0 == prostate_franchise[0].name) ==
              true) {
            listAllData.add(AllData(id: 3, recordsList: prostate_franchise));
          }
        }
      }
    }

    return listAllData;
  }

  static totalKolOverview(
    BuildContext context,
    RxList<String> brandsName,
  ) async {
    var queryParams1 = "";
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams1 = "Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams1 =
            queryParams1 + " or Brand_Master__r.Name = '${brandsName[i]}' ";
      }
    }
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Count(id) from KOL_Brand__c where KOL__c IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Active__c = true) and (${queryParams1}) ";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("totalKolOverview ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));
    return _kolOverview;
  }

  static targetKolOverview(
      BuildContext context, RxList<String> brandsName) async {
    var queryParams1 = "";
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams1 = "Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams1 =
            queryParams1 + " or Brand_Master__r.Name = '${brandsName[i]}' ";
      }
    }
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Count(id) from KOL_Brand__c where KOL__c IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Active__c = true) and KOL__r.Write_In_KOL__pc = false and (${queryParams1})";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("totalKolOverview ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));
    return _kolOverview;
  }

  static classificationKolOverview(
      BuildContext context, RxList<String> brandsName) async {
    var queryParams1 = "";
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams1 = "Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams1 =
            queryParams1 + " or Brand_Master__r.Name = '${brandsName[i]}' ";
      }
    }
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select KOL__r.KOL_Classification__c, Count(Id) from KOL_Brand__c where KOL__c IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Active__c = true) and (${queryParams1}) and KOL__r.Write_In_KOL__pc = false Group By KOL__r.KOL_Classification__c ";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("classificationKolOverview ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static kolTotalEngagements(BuildContext context, RxList<String> brandsName,
      RxList<CongressRecords> congress) async {
    var queryParams1 = "";
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Brand_Master__r.Name = '${brandsName[i]}' ";
      }
    }
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select count(Master_Engagement__c) from KOL_Engagement__c where KOLAccount__c IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Active__c = true) and (${queryParams1} ) and CALENDAR_YEAR(Master_Engagement__r.Engagement_Date__c) = 2022 ${congress.length != 0 ? "and Master_Engagement__r.Congress__c = '${congress[0].id}'" : ""} ";

    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("kolTotalEngagements ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static kolTotalInstitutions(
      BuildContext context, RxList<String>? brandsName) async {
    // print("brandsName[0] url cndknbjd");
    // String url1 =
    //     "kjb ${brandsName![0]} ${brandsName![1]} ${brandsName[2] ?? ""}";
    // print("brandsName[0] url1 $url1 ${brandsName.length}");
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select count_distinct(KOL__r.Primary_Title_Affiliation__pc) from KOL_Brand__c where KOL__r.Show_Institution_on_KOL_Dashboard__pc = true and Brand_Master__r.Name IN ('MM Portfolio', 'Leukemia-Lymphoma', 'Prostate Franchise') and KOL__c IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Active__c = true) ";
    // print("brandsName[0] url $url");
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("brandsName[0] ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static affliatedKols(BuildContext context, RxList<String> brandsName) async {
    var queryParams1 = "";
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams1 = "Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams1 =
            queryParams1 + " or Brand_Master__r.Name = '${brandsName[i]}' ";
      }
    }
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Count(id) from KOL_Brand__c where KOL__c IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK' and Active__c = true) and (${queryParams1}) ";
    // print("affliatedKols Url $url ");
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("affliatedKols ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static getLeukemiaActivity(
      BuildContext context, RxList brandFocus, RxBool myValue) async {
    // print("AutoGenerate _brandsActivity");
    var queryParams1 = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Focus_Master__r.Name ='${brandFocus[i].name}' ";
      }
    }
    String url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Id, Name, (Select Id from KOL_Engagements__r where Master_Engagement__r.Brand_Master__r.Name = 'Leukemia-Lymphoma'  ${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''} AND Master_Engagement__c IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') ), (Select Brand_Master__r.Name, Advocacy_Label_1__c, Advocacy_Score_1__c, Advocacy_Label_2__c, Advocacy_Score_2__c from KOL_Brands__r where Brand_Master__r.Name IN ('Leukemia-Lymphoma')) From Account Where Id IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK') and Id IN (Select KOL__c from KOL_Brand__c where Brand_Master__r.Name IN ('Leukemia-Lymphoma')) ";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Id, Name, (Select Id from KOL_Engagements__r where Master_Engagement__r.Brand_Master__r.Name = 'Leukemia-Lymphoma' ${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''}  ), (Select Brand_Master__r.Name, Advocacy_Label_1__c, Advocacy_Score_1__c, Advocacy_Label_2__c, Advocacy_Score_2__c from KOL_Brands__r where Brand_Master__r.Name IN ('Leukemia-Lymphoma')) From Account Where Id IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK') and Id IN (Select KOL__c from KOL_Brand__c where Brand_Master__r.Name IN ('Leukemia-Lymphoma')) ";
    }

    // print("url getLeukemiaActivity $url");

    var encoded = Uri.encodeFull(url);

    // print("encoded getLeukemiaActivity $encoded");

    var response = await http.get(
      Uri.parse(encoded),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getLeukemiaActivity ${response.body}");
    BrandsActivity _brandsActivity =
        BrandsActivity.fromJson(jsonDecode(response.body));

    return _brandsActivity;
  }

  static getMMPortfolioActivity(
      BuildContext context, RxList brandFocus, RxBool myValue) async {
    var queryParams1 = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Focus_Master__r.Name ='${brandFocus[i].name}' ";
      }
    }
    String url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Id, Name, (Select Id from KOL_Engagements__r where Master_Engagement__r.Brand_Master__r.Name = 'MM Portfolio' ${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''} AND Master_Engagement__c IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') ), (Select Brand_Master__r.Name, Advocacy_Label_1__c, Advocacy_Score_1__c, Advocacy_Label_2__c, Advocacy_Score_2__c from KOL_Brands__r where Brand_Master__r.Name IN ('MM Portfolio')) From Account Where Id IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK') and Id IN (Select KOL__c from KOL_Brand__c where Brand_Master__r.Name IN ('MM Portfolio')) ";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Id, Name, (Select Id from KOL_Engagements__r where Master_Engagement__r.Brand_Master__r.Name = 'MM Portfolio' ${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''} ), (Select Brand_Master__r.Name, Advocacy_Label_1__c, Advocacy_Score_1__c, Advocacy_Label_2__c, Advocacy_Score_2__c from KOL_Brands__r where Brand_Master__r.Name IN ('MM Portfolio')) From Account Where Id IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK') and Id IN (Select KOL__c from KOL_Brand__c where Brand_Master__r.Name IN ('MM Portfolio')) ";
    }

    var encoded = Uri.encodeFull(url);

    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getMMPortfolioActivity ${response.body}");
    BrandsActivity _brandsActivity =
        BrandsActivity.fromJson(jsonDecode(response.body));

    return _brandsActivity;
  }

  static getProstateFranchiseActivity(
      BuildContext context, RxList brandFocus, RxBool myValue) async {
    var queryParams1 = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Focus_Master__r.Name ='${brandFocus[i].name}' ";
      }
    }
    String url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Id, Name, (Select Id from KOL_Engagements__r where Master_Engagement__r.Brand_Master__r.Name = 'Prostate Franchise'  ${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''}AND Master_Engagement__c IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR')), (Select Brand_Master__r.Name, Advocacy_Label_1__c, Advocacy_Score_1__c, Advocacy_Label_2__c, Advocacy_Score_2__c from KOL_Brands__r where Brand_Master__r.Name IN ('Prostate Franchise')) From Account Where Id IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK') and Id IN (Select KOL__c from KOL_Brand__c where Brand_Master__r.Name IN ('Prostate Franchise'))";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Id, Name, (Select Id from KOL_Engagements__r where Master_Engagement__r.Brand_Master__r.Name = 'Prostate Franchise'  ${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''} ), (Select Brand_Master__r.Name, Advocacy_Label_1__c, Advocacy_Score_1__c, Advocacy_Label_2__c, Advocacy_Score_2__c from KOL_Brands__r where Brand_Master__r.Name IN ('Prostate Franchise')) From Account Where Id IN (Select Expert_Account__c from Expert__c where KOL_Profile_Portal__c = 'a343Z000003XdRsQAK') and Id IN (Select KOL__c from KOL_Brand__c where Brand_Master__r.Name IN ('Prostate Franchise'))";
    }

    var encoded = Uri.encodeFull(url);

    var response = await http.get(
      Uri.parse(encoded),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getProstateFranchiseActivity ${response.body}");
    BrandsActivity _brandsActivity =
        BrandsActivity.fromJson(jsonDecode(response.body));

    return _brandsActivity;
  }

  static getEngagementTopicLraderboard(
      BuildContext context, RxList<String> brandsName) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Brand_Master__r.Name%20Brand,%20Focus_Master__r.Brand_Disease_Focus__c%20Focus,%20Topic_Master__r.Name%20Topic,%20Count(Id)%20from%20Master_Enagement__c%20where%20Topic_Master__r.Name%20!=%20null%20and%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Focus_Master__c%20!=%20null%20Group%20by%20Brand_Master__r.Name,%20Focus_Master__r.Brand_Disease_Focus__c,%20Topic_Master__r.Name%20Order%20by%20Count(Id)%20desc";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getEngagementTopicLraderboard ${response.body}");
    TotalLeaderboard _TotalLeaderboard =
        TotalLeaderboard.fromJson(jsonDecode(response.body));
    List<TotalLeaderboardRecords>? _mmPortfolioLeaderboard = _TotalLeaderboard
        .records!
        .where((element) => element.brand == "MM Portfolio")
        .toList();
    List<TotalLeaderboardRecords>? leukemia_lymphomaLeaderboard =
        _TotalLeaderboard.records!
            .where((element) => element.brand == "Leukemia-Lymphoma")
            .toList();
    List<TotalLeaderboardRecords>? prostate_franchiseLeaderboard =
        _TotalLeaderboard.records!
            .where((element) => element.brand == "Prostate Franchise")
            .toList();
    List<TotalLeaderboardRecords>? _mmPortfolioLeaderboardBrandFocus =
        _mmPortfolioLeaderboard
            .where((element) => element.focus == "Brand Focus")
            .toList();
    List<TotalLeaderboardRecords>? _mmPortfolioLeaderboardDiseaseFocus =
        _mmPortfolioLeaderboard
            .where((element) => element.focus == "Disease Focus")
            .toList();
    List<TotalLeaderboardRecords>? leukemia_lymphomaLeaderboardBrandFocus =
        leukemia_lymphomaLeaderboard
            .where((element) => element.focus == "Brand Focus")
            .toList();
    List<TotalLeaderboardRecords>? leukemia_lymphomaLeaderboardDiseaseFocus =
        leukemia_lymphomaLeaderboard
            .where((element) => element.focus == "Disease Focus")
            .toList();
    List<TotalLeaderboardRecords>? prostate_franchiseBrandFocus =
        prostate_franchiseLeaderboard
            .where((element) => element.focus == "Brand Focus")
            .toList();
    List<TotalLeaderboardRecords>? prostate_franchiseDiseaseFocus =
        prostate_franchiseLeaderboard
            .where((element) => element.focus == "Disease Focus")
            .toList();

    List<TotalLeaderboardData> listTotalLeaderboard = [
      // TotalLeaderboardData(
      //   id: 1,
      //   brandFocusList: leukemia_lymphomaLeaderboardBrandFocus,
      //   diseasesFocusList: leukemia_lymphomaLeaderboardDiseaseFocus,
      // ),
      // TotalLeaderboardData(
      //   id: 2,
      //   brandFocusList: _mmPortfolioLeaderboardBrandFocus,
      //   diseasesFocusList: _mmPortfolioLeaderboardDiseaseFocus,
      // ),
      // TotalLeaderboardData(
      //   id: 3,
      //   brandFocusList: prostate_franchiseBrandFocus,
      //   diseasesFocusList: prostate_franchiseDiseaseFocus,
      // ),
    ];
    // int i = 0;
    // while (i < 3) {
    //   if (brandsName[i] == leukemia_lymphomaLeaderboardBrandFocus[0].brand) {
    //     listTotalLeaderboard.add(
    //       TotalLeaderboardData(
    //         id: 1,
    //         brandFocusList: leukemia_lymphomaLeaderboardBrandFocus,
    //         diseasesFocusList: leukemia_lymphomaLeaderboardDiseaseFocus,
    //       ),
    //     );
    //     // text += "<br>The number is " + i;
    //     i++;
    //   }
    // }
    for (int i = 0; i < brandsName.length; i++) {
      if (brandsName[i] == leukemia_lymphomaLeaderboardBrandFocus[0].brand) {
        listTotalLeaderboard.add(
          TotalLeaderboardData(
            id: 1,
            brandFocusList: leukemia_lymphomaLeaderboardBrandFocus,
            diseasesFocusList: leukemia_lymphomaLeaderboardDiseaseFocus,
          ),
        );
      } else if (brandsName[i] == _mmPortfolioLeaderboardBrandFocus[0].brand) {
        listTotalLeaderboard.add(TotalLeaderboardData(
          id: 2,
          brandFocusList: _mmPortfolioLeaderboardBrandFocus,
          diseasesFocusList: _mmPortfolioLeaderboardDiseaseFocus,
        ));
      } else if (brandsName[i] == prostate_franchiseBrandFocus[0].brand) {
        listTotalLeaderboard.add(TotalLeaderboardData(
          id: 3,
          brandFocusList: prostate_franchiseBrandFocus,
          diseasesFocusList: prostate_franchiseDiseaseFocus,
        ));
      }
    }
    return listTotalLeaderboard;
  }

  static getMeetingsAndActivites(
      BuildContext context,
      RxList brandFocus,
      RxList<CongressRecords> congress,
      RxBool myValue,
      RxList<String> brandsName) async {
    var queryParams1 = "";
    var queryParams = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Focus_Master__r.Name ='${brandFocus[i].name}' ";
      }
    }
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams =
            "Master_Engagement__r.Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams = queryParams +
            " or Master_Engagement__r.Brand_Master__r.Name ='${brandsName[i]}' ";
      }
    }
    String? url;
    // print("queryParamsgetMeetingsAndActivites $queryParams");
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Master_Engagement__r.Brand_Master__r.Name,Master_Engagement__r.Brand_Master__r.Color__c, Attendee_Type__c, Master_Engagement__r.Engagement_Date__c, Master_Engagement__r.Name, Master_Engagement__r.Start_Date_Time__c, Id, KOLAccount__r.Name, Master_Engagement__r.Id FROM KOL_Engagement__c WHERE Master_Engagement__r.KOL_Profile_Portal__r.Name = 'Janssen KOL Portal' AND CALENDAR_YEAR(Master_Engagement__r.Engagement_Date__c) = 2022 AND Master_Engagement__c IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') AND (${queryParams})${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''} ORDER BY Master_Engagement__r.Start_Date_Time__c desc ";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT Master_Engagement__r.Brand_Master__r.Name,Master_Engagement__r.Brand_Master__r.Color__c, Attendee_Type__c, Master_Engagement__r.Engagement_Date__c, Master_Engagement__r.Name, Master_Engagement__r.Start_Date_Time__c, Id, KOLAccount__r.Name, Master_Engagement__r.Id FROM KOL_Engagement__c WHERE Master_Engagement__r.KOL_Profile_Portal__r.Name = 'Janssen KOL Portal' AND CALENDAR_YEAR(Master_Engagement__r.Engagement_Date__c) = 2022 AND (${queryParams})${queryParams1 != '' ? 'and (' + queryParams1 + ')' : ''} ORDER BY Master_Engagement__r.Start_Date_Time__c desc ";
    }
    // print("getMeetingsAndActivites url $url");
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getMeetingsAndActivites ${response.body}");
    final _currentDate = DateTime.now();
    String _dateNow = DateFormat("yyyy-MM-dd HH:MM").format(_currentDate);
    MeetingsActivites _meetingsActivites =
        MeetingsActivites.fromJson(jsonDecode(response.body));
    List<MeetingsActivitesRecords> lisOfOneonOneMeeting =
        _meetingsActivites.records!.where((element) {
      return element.masterEngagementR!.name == "1:1 Meetings";
    }).toList();
    List<MeetingsActivitesRecords> lisOfActivities =
        _meetingsActivites.records!.where((element) {
      return element.masterEngagementR!.name != "1:1 Meetings";
    }).toList();
    List<MeetingsActivitesRecords> _listUpcomingMeetings =
        lisOfOneonOneMeeting.where((element) {
      String data = DateFormat("yyyy-MM-dd HH:MM").format(
          DateTime.parse(element.masterEngagementR!.startDateTimeC ?? ""));
      return DateTime.parse(data).isAfter(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitesRecords> _listPreviusMeetings =
        lisOfOneonOneMeeting.where((element) {
      var data = DateFormat("yyyy-MM-dd HH:MM").format(
          DateTime.parse(element.masterEngagementR!.startDateTimeC ?? ""));
      return DateTime.parse(data).isBefore(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitesRecords> _listUpcomingActivities =
        lisOfActivities.where((element) {
      var data = DateFormat("yyyy-MM-dd HH:MM").format(
          DateTime.parse(element.masterEngagementR!.startDateTimeC ?? ""));
      return DateTime.parse(data).isAfter(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitesRecords> _listPreviusActivites =
        lisOfActivities.where((element) {
      var data = DateFormat("yyyy-MM-dd HH:MM").format(
          DateTime.parse(element.masterEngagementR!.startDateTimeC ?? ""));
      return DateTime.parse(data).isBefore(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitiesData> _meetingsActivitiesData = [
      MeetingsActivitiesData(
          id: 1,
          upcomingList: _listUpcomingMeetings,
          previousList: _listPreviusMeetings),
      MeetingsActivitiesData(
          id: 1,
          upcomingList: _listUpcomingActivities,
          previousList: _listPreviusActivites),
    ];
    // List<MeetingsActivitesRecords> testing = lisOfActivities.where((element) {
    //   print(DateFormat("yyyy-MM-dd HH:MM:SS").format(
    //       DateTime.parse(element.masterEngagementR!.startDateTimeC ?? "")));
    //   return DateTime.parse(element.masterEngagementR!.engagementDateC ?? "")
    //       .isBefore(DateTime.parse(_dateNow));
    // }).toList();
    return _meetingsActivitiesData;
  }

  static getPieChartData(BuildContext context, RxList brandFocus,
      RxBool myValue, RxList<String> brandsName) async {
    var queryParams1 = "";
    var queryParams = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      }
    }
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams =
            "Master_Engagement__r.Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams = queryParams +
            " or Master_Engagement__r.Brand_Master__r.Name ='${brandsName[i]}' ";
      }
    }
    String? url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select KOL_Brand__r.Advocacy_Score_1__c, count(id)from KOL_Engagement__c where Master_Engagement__r.KOL_Profile_Portal__r.Name = 'Janssen KOL Portal' and (${queryParams})${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''}AND Master_Engagement__c IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') group by KOL_Brand__r.Advocacy_Score_1__c order by KOL_Brand__r.Advocacy_Score_1__c asc ";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select KOL_Brand__r.Advocacy_Score_1__c, count(id)from KOL_Engagement__c where Master_Engagement__r.KOL_Profile_Portal__r.Name = 'Janssen KOL Portal' and (${queryParams})${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} group by KOL_Brand__r.Advocacy_Score_1__c order by KOL_Brand__r.Advocacy_Score_1__c asc ";
    }

    // print("url piechart $url");

    var encoded = Uri.encodeFull(url);
    var response = await http.get(
      Uri.parse(encoded),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getProstateFranchiseActivity ${response.body}");
    PieChartData _pieChartData =
        PieChartData.fromJson(jsonDecode(response.body));

    return _pieChartData;
  }

  static getRectangleChartData(BuildContext context, RxList brandFocus,
      RxBool myValue, RxList<String> brandsName) async {
    var queryParams1 = "";
    var queryParams = "";
    for (int i = 0; i < brandFocus.length; i++) {
      if (i == 0) {
        queryParams1 =
            "Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      } else {
        queryParams1 = queryParams1 +
            " or Master_Engagement__r.Focus_Master__r.Name = '${brandFocus[i].name}' ";
      }
    }
    for (int i = 0; i < brandsName.length; i++) {
      if (i == 0) {
        queryParams =
            "Master_Engagement__r.Brand_Master__r.Name = '${brandsName[i]}' ";
      } else {
        queryParams = queryParams +
            " or Master_Engagement__r.Brand_Master__r.Name ='${brandsName[i]}' ";
      }
    }
    String? url;
    if (myValue == true) {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Master_Engagement__r.Type__c, KOL_Brand__r.Advocacy_Score_1__c, count(id)from KOL_Engagement__c where Master_Engagement__r.KOL_Profile_Portal__r.Name = 'Janssen KOL Portal' and (${queryParams})${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''}AND Master_Engagement__c IN (Select Master_Engagement__c from Kol_Attendee__c where Employee__r.Employee__c = '0053Z00000LOFbR') group by Master_Engagement__r.Type__c, KOL_Brand__r.Advocacy_Score_1__c order by KOL_Brand__r.Advocacy_Score_1__c asc ";
    } else {
      url =
          "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select Master_Engagement__r.Type__c, KOL_Brand__r.Advocacy_Score_1__c, count(id)from KOL_Engagement__c where Master_Engagement__r.KOL_Profile_Portal__r.Name = 'Janssen KOL Portal' and (${queryParams})${queryParams1 != '' ? 'and(' + queryParams1 + ')' : ''} group by Master_Engagement__r.Type__c, KOL_Brand__r.Advocacy_Score_1__c order by KOL_Brand__r.Advocacy_Score_1__c asc ";
    }

    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQMZ_89mZgeJJAlE94GvQz0JkRdW260onnWa5BBbBb8dd9EX.3jMW3SQUa6byjBLWUsRIm3pjs1QlRJMR2x.iyBRTmUcn'
      },
    );
    // print("getProstateFranchiseActivity ${response.body}");
    PieChartData __rectangleChartData =
        PieChartData.fromJson(jsonDecode(response.body));
    List<PieChartRecords> _oneMeetingListData = __rectangleChartData.records!
        .where((element) => element.typeC == "1:1 Meetings")
        .toList();
    List<PieChartRecords> _UnscoredMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == null)
        .toList();
    List<PieChartRecords> _DetractorMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _advisoryListData = __rectangleChartData.records!
        .where((element) => element.typeC == "Advisory Board")
        .toList();
    List<PieChartRecords> _UnscoredAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == null)
        .toList();
    List<PieChartRecords> _DetractorAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _consultingData = __rectangleChartData.records!
        .where((element) => element.typeC == "Consulting")
        .toList();
    List<PieChartRecords> _UnscoredConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == null)
        .toList();
    List<PieChartRecords> _DetractorConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();
    List<PieChartRecords> _ExecutiveData = __rectangleChartData.records!
        .where((element) => element.typeC == "Executive Encounter")
        .toList();
    List<PieChartRecords> _UnscoredExecutiveData =
        _ExecutiveData.where((element) => element.advocacyScore1C == null)
            .toList();
    List<PieChartRecords> _DetractorExecutiveData = _ExecutiveData.where(
        (element) => element.advocacyScore1C == "Detractor").toList();
    List<PieChartRecords> _NeutralExecutiveData =
        _ExecutiveData.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveExecutiveData = _ExecutiveData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveExecutiveData = _ExecutiveData.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<PieChartRecords> _InstitutionalData = __rectangleChartData.records!
        .where((element) => element.typeC == "Institutional Programs")
        .toList();
    List<PieChartRecords> _UnscoredInstitutionalData =
        _InstitutionalData.where((element) => element.advocacyScore1C == null)
            .toList();
    List<PieChartRecords> _DetractorInstitutionalData =
        _InstitutionalData.where(
            (element) => element.advocacyScore1C == "Detractor").toList();
    List<PieChartRecords> _NeutralInstitutionalData = _InstitutionalData.where(
        (element) => element.advocacyScore1C == "Neutral").toList();
    List<PieChartRecords> _PassiveInstitutionalData = _InstitutionalData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveInstitutionalData =
        _InstitutionalData.where(
                (element) => element.advocacyScore1C == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _SponsorshipData = __rectangleChartData.records!
        .where((element) => element.typeC == "Sponsorship / 3rd Party Events")
        .toList();
    List<PieChartRecords> _UnscoredSponsorshipData =
        _SponsorshipData.where((element) => element.advocacyScore1C == null)
            .toList();
    List<PieChartRecords> _DetractorSponsorshipData = _SponsorshipData.where(
        (element) => element.advocacyScore1C == "Detractor").toList();
    List<PieChartRecords> _NeutralSponsorshipData = _SponsorshipData.where(
        (element) => element.advocacyScore1C == "Neutral").toList();
    List<PieChartRecords> _PassiveSponsorshipData = _SponsorshipData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveSponsorshipData = _SponsorshipData.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<PieChartRecords> _InternalData = __rectangleChartData.records!
        .where((element) => element.typeC == "Internal Event")
        .toList();
    List<PieChartRecords> _UnscoredInternalData =
        _InternalData.where((element) => element.advocacyScore1C == null)
            .toList();
    List<PieChartRecords> _DetractorInternalData =
        _InternalData.where((element) => element.advocacyScore1C == "Detractor")
            .toList();
    List<PieChartRecords> _NeutralInternalData =
        _InternalData.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveInternalData = _InternalData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveInternalData = _InternalData.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<PieChartRecords> _SteeringData = __rectangleChartData.records!
        .where((element) => element.typeC == "Steering Committee")
        .toList();
    List<PieChartRecords> _UnscoredSteeringData =
        _SteeringData.where((element) => element.advocacyScore1C == null)
            .toList();
    List<PieChartRecords> _DetractorSteeringData =
        _SteeringData.where((element) => element.advocacyScore1C == "Detractor")
            .toList();
    List<PieChartRecords> _NeutralSteeringData =
        _SteeringData.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveSteeringData = _SteeringData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveSteeringData = _SteeringData.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<PieChartRecords> _ProductData = __rectangleChartData.records!
        .where((element) => element.typeC == "Product Theater/Symposium")
        .toList();
    List<PieChartRecords> _UnscoredProductData =
        _ProductData.where((element) => element.advocacyScore1C == null)
            .toList();
    List<PieChartRecords> _DetractorProductData =
        _ProductData.where((element) => element.advocacyScore1C == "Detractor")
            .toList();
    List<PieChartRecords> _NeutralProductData =
        _ProductData.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveProductData = _ProductData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveProductData = _ProductData.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<PieChartRecords> _OtherData = __rectangleChartData.records!
        .where((element) => element.typeC == "Other")
        .toList();
    List<PieChartRecords> _UnscoredOtherData =
        _OtherData.where((element) => element.advocacyScore1C == null).toList();
    List<PieChartRecords> _DetractorOtherData =
        _OtherData.where((element) => element.advocacyScore1C == "Detractor")
            .toList();
    List<PieChartRecords> _NeutralOtherData =
        _OtherData.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveOtherData = _OtherData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveOtherData =
        _OtherData.where((element) => element.typeC == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _speakerList = __rectangleChartData.records!
        .where((element) => element.typeC == "Speaker Training")
        .toList();
    List<PieChartRecords> _UnscoredSpeakerData = _speakerList
        .where((element) => element.advocacyScore1C == null)
        .toList();
    List<PieChartRecords> _DetractorSpeakerData = _speakerList
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralSpeakerData = _speakerList
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveSpeakerData = _speakerList
        .where((element) => element.typeC == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveSpeakerData = _speakerList
        .where((element) => element.typeC == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _mslRoundtableList = __rectangleChartData.records!
        .where((element) => element.advocacyScore1C == "MSL Roundtable")
        .toList();
    List<PieChartRecords> _UnscoredmslRoundtableData = _mslRoundtableList
        .where((element) => element.advocacyScore1C == null)
        .toList();
    List<PieChartRecords> _DetractormslRoundtableData = _mslRoundtableList
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralmslRoundtableData = _mslRoundtableList
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassivemslRoundtableData = _mslRoundtableList
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactivemslRoundtableData = _mslRoundtableList
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _mediaEventList = __rectangleChartData.records!
        .where((element) => element.typeC == "Media Event")
        .toList();
    List<PieChartRecords> _UnscoredmediaEventData = _mediaEventList
        .where((element) => element.advocacyScore1C == null)
        .toList();
    List<PieChartRecords> _DetractormediaEventData = _mediaEventList
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralmediaEventData = _mediaEventList
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassivemediaEventData = _mediaEventList
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactivemediaEventData = _mediaEventList
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _CMEList = __rectangleChartData.records!
        .where((element) => element.typeC == "CME")
        .toList();
    List<PieChartRecords> _UnscoredCMEData =
        _CMEList.where((element) => element.advocacyScore1C == null).toList();
    List<PieChartRecords> _DetractorCMEData =
        _CMEList.where((element) => element.advocacyScore1C == "Detractor")
            .toList();
    List<PieChartRecords> _NeutralCMEData =
        _CMEList.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveCMEData = _CMEList.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveCMEData = _CMEList.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<RectangleChartDataMap>? __rectangleChartDataMap = [
      RectangleChartDataMap(
        id: "1",
        name: "1:1 Meetings",
        listOfRectangularChartData: _oneMeetingListData,
        neutralList: _NeutralMeetingData,
        passiveList: _PassiveMeetingData,
        unscoredList: _UnscoredMeetingData,
        detractorList: _DetractorMeetingData,
        proactiveList: _ProactiveMeetingData,
      ),
      RectangleChartDataMap(
        id: "2",
        name: "Executive Encounter",
        listOfRectangularChartData: _ExecutiveData,
        neutralList: _NeutralExecutiveData,
        passiveList: _PassiveExecutiveData,
        unscoredList: _UnscoredExecutiveData,
        detractorList: _DetractorExecutiveData,
        proactiveList: _ProactiveExecutiveData,
      ),
      RectangleChartDataMap(
        id: "3",
        name: "Institutional Programs",
        listOfRectangularChartData: _InstitutionalData,
        neutralList: _NeutralInstitutionalData,
        passiveList: _PassiveInstitutionalData,
        unscoredList: _UnscoredInstitutionalData,
        detractorList: _DetractorInstitutionalData,
        proactiveList: _ProactiveInstitutionalData,
      ),
      RectangleChartDataMap(
        id: "4",
        name: "Advisory Board",
        listOfRectangularChartData: _advisoryListData,
        neutralList: _NeutralAdvisoryData,
        passiveList: _PassiveAdvisoryData,
        unscoredList: _UnscoredAdvisoryData,
        detractorList: _DetractorAdvisoryData,
        proactiveList: _ProactiveAdvisoryData,
      ),
      RectangleChartDataMap(
        id: "5",
        name: "Steering Committee",
        listOfRectangularChartData: _SteeringData,
        neutralList: _NeutralSteeringData,
        passiveList: _PassiveSteeringData,
        unscoredList: _UnscoredSteeringData,
        detractorList: _DetractorSteeringData,
        proactiveList: _ProactiveSteeringData,
      ),
      RectangleChartDataMap(
        id: "6",
        name: "MSL Roundtable",
        listOfRectangularChartData: _mslRoundtableList,
        neutralList: _DetractormslRoundtableData,
        passiveList: _PassivemslRoundtableData,
        unscoredList: _UnscoredmslRoundtableData,
        detractorList: _DetractormslRoundtableData,
        proactiveList: _ProactivemslRoundtableData,
      ),
      RectangleChartDataMap(
        id: "7",
        name: "Consulting",
        listOfRectangularChartData: _consultingData,
        neutralList: _NeutralConsultingData,
        passiveList: _PassiveConsultingData,
        unscoredList: _UnscoredConsultingData,
        detractorList: _DetractorConsultingData,
        proactiveList: _ProactiveConsultingData,
      ),
      RectangleChartDataMap(
        id: "8",
        name: "Speaker Training",
        listOfRectangularChartData: _speakerList,
        neutralList: _NeutralSpeakerData,
        passiveList: _PassiveSpeakerData,
        unscoredList: _UnscoredSpeakerData,
        detractorList: _DetractorSpeakerData,
        proactiveList: _ProactiveSpeakerData,
      ),
      RectangleChartDataMap(
        id: "9",
        name: "Internal Event",
        listOfRectangularChartData: _InternalData,
        neutralList: _NeutralInternalData,
        passiveList: _PassiveInternalData,
        unscoredList: _UnscoredInternalData,
        detractorList: _DetractorInternalData,
        proactiveList: _ProactiveInternalData,
      ),
      RectangleChartDataMap(
        id: "10",
        name: "Media Event",
        listOfRectangularChartData: _mediaEventList,
        neutralList: _NeutralmediaEventData,
        passiveList: _PassivemediaEventData,
        unscoredList: _UnscoredmediaEventData,
        detractorList: _DetractormediaEventData,
        proactiveList: _ProactivemediaEventData,
      ),
      RectangleChartDataMap(
        id: "11",
        name: "Product Theater/Symposium",
        listOfRectangularChartData: _ProductData,
        neutralList: _NeutralProductData,
        passiveList: _PassiveProductData,
        unscoredList: _UnscoredProductData,
        detractorList: _DetractorProductData,
        proactiveList: _ProactiveProductData,
      ),
      RectangleChartDataMap(
        id: "12",
        name: "Sponsorship / 3rd Party Events",
        listOfRectangularChartData: _SponsorshipData,
        neutralList: _NeutralSponsorshipData,
        passiveList: _PassiveSponsorshipData,
        unscoredList: _UnscoredSponsorshipData,
        detractorList: _DetractorSponsorshipData,
        proactiveList: _ProactiveSponsorshipData,
      ),
      RectangleChartDataMap(
        id: "13",
        name: "CME",
        listOfRectangularChartData: _CMEList,
        neutralList: _NeutralCMEData,
        passiveList: _PassiveCMEData,
        unscoredList: _UnscoredCMEData,
        detractorList: _DetractorCMEData,
        proactiveList: _ProactiveCMEData,
      ),
      RectangleChartDataMap(
        id: "14",
        name: "Other",
        listOfRectangularChartData: _OtherData,
        neutralList: _NeutralOtherData,
        passiveList: _PassiveOtherData,
        unscoredList: _UnscoredOtherData,
        detractorList: _DetractorOtherData,
        proactiveList: _ProactiveOtherData,
      ),
    ];
    // __rectangleChartDataMap.forEach((element) {
    //   print("__rectangleChartDataMap ${element.id} ${element.unscoredList}");
    // });

    return __rectangleChartDataMap;
  }
}
