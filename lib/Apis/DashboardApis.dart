import 'dart:convert';

import 'package:connex/Models/engagements.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;

import '../Models/brandList_model.dart';
import '../Models/congressList_model.dart';
import '../Models/engagements_sort.dart';

class DashBoardApi {
  static getCongressList(BuildContext context) async {
    Autogenerated? _brandLists;
    CongressList? _congressList;
    RxList<Records> _selectedItems = RxList<Records>([]);
    RxList<CongressRecords> _CongressItems =
        RxList<CongressRecords>([CongressRecords(labelC: "Select Congress")]);

    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Label__c%20from%20Congress__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQE7Dv4NG9SLNdIiA_bdEVfdxG5HhC5vzEET514..L0Szkd15JUu3sX6oOM7j1taiOP4YlBMtlo0G.YOnZNEQx2.LXhcS'
      },
    );
    print("response ${response.body}");
    _congressList = CongressList.fromJson(jsonDecode(response.body));

    return _congressList;
  }

  static getTotalEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Brand_Master__r.Name%20!=%20%27%27%20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQE7Dv4NG9SLNdIiA_bdEVfdxG5HhC5vzEET514..L0Szkd15JUu3sX6oOM7j1taiOP4YlBMtlo0G.YOnZNEQx2.LXhcS'
      },
    );
    print("getTotalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      AllData(id: 1, recordsList: leukemia_lymphoma),
      AllData(id: 2, recordsList: _mmPortfolio),
      AllData(id: 3, recordsList: prostate_franchise),
    ];
    // print(listAllData[0].recordsList![0].name);
    // _data![0].brandRecords!.add(_mmPortfolio![0]);
    // _data!.add()
    // _data!.add(_mmPortfolio);
    return listAllData;
  }

  static getCommercialEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Engagement_Type__c%20=%20%27Commercial%27%20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQE7Dv4NG9SLNdIiA_bdEVfdxG5HhC5vzEET514..L0Szkd15JUu3sX6oOM7j1taiOP4YlBMtlo0G.YOnZNEQx2.LXhcS'
      },
    );
    print("getTotalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      AllData(id: 1, recordsList: leukemia_lymphoma),
      AllData(id: 2, recordsList: _mmPortfolio),
      AllData(id: 3, recordsList: prostate_franchise),
    ];

    return listAllData;
  }

  static getMedicalEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Engagement_Type__c%20=%20%27Medical%27%20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQE7Dv4NG9SLNdIiA_bdEVfdxG5HhC5vzEET514..L0Szkd15JUu3sX6oOM7j1taiOP4YlBMtlo0G.YOnZNEQx2.LXhcS'
      },
    );
    print("getTotalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      AllData(id: 1, recordsList: leukemia_lymphoma),
      AllData(id: 2, recordsList: _mmPortfolio),
      AllData(id: 3, recordsList: prostate_franchise),
    ];

    return listAllData;
  }
}
