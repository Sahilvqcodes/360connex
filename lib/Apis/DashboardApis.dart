import 'dart:convert';

import 'package:connex/Models/engagements.dart';
import 'package:connex/screens/DashBoard.dart/kol_overview.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';

import '../Models/1:1_and_activities.dart';
import '../Models/Kol_overview.dart';
import '../Models/brandList_model.dart';
import '../Models/brands_activity.dart';
import '../Models/congressList_model.dart';
import '../Models/engagements_sort.dart';
import '../Models/pie_chart_data.dart';
import '../Models/pie_data_map.dart';
import '../Models/total_leaderboard.dart';

class DashBoardApi {
  static getCongressList(BuildContext context) async {
    Autogenerated? _brandLists;
    CongressList? _congressList;
    RxList<Records> _selectedItems = RxList<Records>([]);
    RxList<CongressRecords> _CongressItems =
        RxList<CongressRecords>([CongressRecords(labelC: "Select Congress")]);

    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Label__c%20from%20Congress__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("response ${response.body}");
    _congressList = CongressList.fromJson(jsonDecode(response.body));

    return _congressList;
  }

  static getTotalEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Brand_Master__r.Name%20!=%20%27%27%20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getTotalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      AllData(id: 1, recordsList: leukemia_lymphoma),
      AllData(id: 2, recordsList: _mmPortfolio),
      AllData(id: 3, recordsList: prostate_franchise),
    ];
    // print(listAllData[0].recordsList![0].name);
    // _data![0].brandRecords!.add(_mmPortfolio![0]);
    // _data!.add()
    // _data!.add(_mmPortfolio);
    return listAllData;
  }

  static getCommercialEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Engagement_Type__c%20=%20%27Commercial%27%20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getCommercialEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      AllData(id: 1, recordsList: leukemia_lymphoma),
      AllData(id: 2, recordsList: _mmPortfolio),
      AllData(id: 3, recordsList: prostate_franchise),
    ];

    return listAllData;
  }

  static getMedicalEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Brand_Master__r.Name,%20COUNT(id)%20engs,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20FROM%20Master_Enagement__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Engagement_Type__c%20=%20%27Medical%27%20GROUP%20BY%20Brand_Master__r.Name,%20CALENDAR_QUARTER(Engagement_Date__c),%20CALENDAR_YEAR(Engagement_Date__c)%20ORDER%20BY%20GROUPING(Brand_Master__r.Name)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getMedicalEngagements ${response.body}");
    Engagements _totalEngagements =
        Engagements.fromJson(jsonDecode(response.body));
    List<EngagementsRecords>? _mmPortfolio = _totalEngagements.records!
        .where((element) => element.name == "MM Portfolio")
        .toList();
    List<EngagementsRecords>? leukemia_lymphoma = _totalEngagements.records!
        .where((element) => element.name == "Leukemia-Lymphoma")
        .toList();
    List<EngagementsRecords>? prostate_franchise = _totalEngagements.records!
        .where((element) => element.name == "Prostate Franchise")
        .toList();
    // List<EngagementsRecords>? _data;
    List<AllData> listAllData = [
      AllData(id: 1, recordsList: leukemia_lymphoma),
      AllData(id: 2, recordsList: _mmPortfolio),
      AllData(id: 3, recordsList: prostate_franchise),
    ];

    return listAllData;
  }

  static totalKolOverview(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Count(id)%20from%20KOL_Brand__c%20where%20KOL__c%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Active__c%20=%20true)%20and%20(Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("totalKolOverview ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));
    return _kolOverview;
  }

  static targetKolOverview(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Count(id)%20from%20KOL_Brand__c%20where%20KOL__c%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Active__c%20=%20true)%20and%20KOL__r.Write_In_KOL__pc%20=%20false%20and%20(Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("totalKolOverview ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));
    return _kolOverview;
  }

  static classificationKolOverview(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20KOL__r.KOL_Classification__c,%20Count(Id)%20from%20KOL_Brand__c%20where%20KOL__c%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Active__c%20=%20true)%20and%20(Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)%20and%20KOL__r.Write_In_KOL__pc%20=%20false%20Group%20By%20KOL__r.KOL_Classification__c";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("classificationKolOverview ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static kolTotalEngagements(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20count(Master_Engagement__c)%20from%20KOL_Engagement__c%20where%20KOLAccount__c%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Active__c%20=%20true)%20and%20(Master_Engagement__r.Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)%20and%20CALENDAR_YEAR(Master_Engagement__r.Engagement_Date__c)%20=%202022";

    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("kolTotalEngagements ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static kolTotalInstitutions(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20count_distinct(KOL__r.Primary_Title_Affiliation__pc)%20from%20KOL_Brand__c%20where%20KOL__r.Show_Institution_on_KOL_Dashboard__pc%20=%20true%20and%20Brand_Master__r.Name%20IN%20(%27MM%20Portfolio%27,%20%27Leukemia-Lymphoma%27,%20%27Prostate%20Franchise%27)%20and%20KOL__c%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Active__c%20=%20true)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("kolTotalInstitutions ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static affliatedKols(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Count(id)%20from%20KOL_Brand__c%20where%20KOL__c%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Active__c%20=%20true)%20and%20(Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("affliatedKols ${response.body}");
    KolOvervievAndInstitution _kolOverview =
        KolOvervievAndInstitution.fromJson(jsonDecode(response.body));

    return _kolOverview;
  }

  static getLeukemiaActivity(BuildContext context) async {
    // print("AutoGenerate _brandsActivity");
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Name,%20(Select%20Id%20from%20KOL_Engagements__r%20where%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20),%20(Select%20Brand_Master__r.Name,%20Advocacy_Label_1__c,%20Advocacy_Score_1__c,%20Advocacy_Label_2__c,%20Advocacy_Score_2__c%20from%20KOL_Brands__r%20where%20Brand_Master__r.Name%20IN%20(%27Leukemia-Lymphoma%27))%20From%20Account%20Where%20Id%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27)%20and%20Id%20IN%20(Select%20KOL__c%20from%20KOL_Brand__c%20where%20Brand_Master__r.Name%20IN%20(%27Leukemia-Lymphoma%27))";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getLeukemiaActivity ${response.body}");
    BrandsActivity _brandsActivity =
        BrandsActivity.fromJson(jsonDecode(response.body));

    return _brandsActivity;
  }

  static getMMPortfolioActivity(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Name,%20(Select%20Id%20from%20KOL_Engagements__r%20where%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20),%20(Select%20Brand_Master__r.Name,%20Advocacy_Label_1__c,%20Advocacy_Score_1__c,%20Advocacy_Label_2__c,%20Advocacy_Score_2__c%20from%20KOL_Brands__r%20where%20Brand_Master__r.Name%20IN%20(%27MM%20Portfolio%27))%20From%20Account%20Where%20Id%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27)%20and%20Id%20IN%20(Select%20KOL__c%20from%20KOL_Brand__c%20where%20Brand_Master__r.Name%20IN%20(%27MM%20Portfolio%27))";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getMMPortfolioActivity ${response.body}");
    BrandsActivity _brandsActivity =
        BrandsActivity.fromJson(jsonDecode(response.body));

    return _brandsActivity;
  }

  static getProstateFranchiseActivity(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Id,%20Name,%20(Select%20Id%20from%20KOL_Engagements__r%20where%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20),%20(Select%20Brand_Master__r.Name,%20Advocacy_Label_1__c,%20Advocacy_Score_1__c,%20Advocacy_Label_2__c,%20Advocacy_Score_2__c%20from%20KOL_Brands__r%20where%20Brand_Master__r.Name%20IN%20(%27Prostate%20Franchise%27))%20From%20Account%20Where%20Id%20IN%20(Select%20Expert_Account__c%20from%20Expert__c%20where%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27)%20and%20Id%20IN%20(Select%20KOL__c%20from%20KOL_Brand__c%20where%20Brand_Master__r.Name%20IN%20(%27Prostate%20Franchise%27))";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getProstateFranchiseActivity ${response.body}");
    BrandsActivity _brandsActivity =
        BrandsActivity.fromJson(jsonDecode(response.body));

    return _brandsActivity;
  }

  static getEngagementTopicLraderboard(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Brand_Master__r.Name%20Brand,%20Focus_Master__r.Brand_Disease_Focus__c%20Focus,%20Topic_Master__r.Name%20Topic,%20Count(Id)%20from%20Master_Enagement__c%20where%20Topic_Master__r.Name%20!=%20null%20and%20KOL_Profile_Portal__c%20=%20%27a343Z000003XdRsQAK%27%20and%20Focus_Master__c%20!=%20null%20Group%20by%20Brand_Master__r.Name,%20Focus_Master__r.Brand_Disease_Focus__c,%20Topic_Master__r.Name%20Order%20by%20Count(Id)%20desc";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getEngagementTopicLraderboard ${response.body}");
    TotalLeaderboard _TotalLeaderboard =
        TotalLeaderboard.fromJson(jsonDecode(response.body));
    List<TotalLeaderboardRecords>? _mmPortfolioLeaderboard = _TotalLeaderboard
        .records!
        .where((element) => element.brand == "MM Portfolio")
        .toList();
    List<TotalLeaderboardRecords>? leukemia_lymphomaLeaderboard =
        _TotalLeaderboard.records!
            .where((element) => element.brand == "Leukemia-Lymphoma")
            .toList();
    List<TotalLeaderboardRecords>? prostate_franchiseLeaderboard =
        _TotalLeaderboard.records!
            .where((element) => element.brand == "Prostate Franchise")
            .toList();
    List<TotalLeaderboardRecords>? _mmPortfolioLeaderboardBrandFocus =
        _mmPortfolioLeaderboard
            .where((element) => element.focus == "Brand Focus")
            .toList();
    List<TotalLeaderboardRecords>? _mmPortfolioLeaderboardDiseaseFocus =
        _mmPortfolioLeaderboard
            .where((element) => element.focus == "Disease Focus")
            .toList();
    List<TotalLeaderboardRecords>? leukemia_lymphomaLeaderboardBrandFocus =
        leukemia_lymphomaLeaderboard
            .where((element) => element.focus == "Brand Focus")
            .toList();
    List<TotalLeaderboardRecords>? leukemia_lymphomaLeaderboardDiseaseFocus =
        leukemia_lymphomaLeaderboard
            .where((element) => element.focus == "Disease Focus")
            .toList();
    List<TotalLeaderboardRecords>? prostate_franchiseBrandFocus =
        prostate_franchiseLeaderboard
            .where((element) => element.focus == "Brand Focus")
            .toList();
    List<TotalLeaderboardRecords>? prostate_franchiseDiseaseFocus =
        prostate_franchiseLeaderboard
            .where((element) => element.focus == "Disease Focus")
            .toList();

    List<TotalLeaderboardData> listTotalLeaderboard = [
      TotalLeaderboardData(
        id: 1,
        brandFocusList: leukemia_lymphomaLeaderboardBrandFocus,
        diseasesFocusList: leukemia_lymphomaLeaderboardDiseaseFocus,
      ),
      TotalLeaderboardData(
        id: 2,
        brandFocusList: _mmPortfolioLeaderboardBrandFocus,
        diseasesFocusList: _mmPortfolioLeaderboardDiseaseFocus,
      ),
      TotalLeaderboardData(
        id: 3,
        brandFocusList: prostate_franchiseBrandFocus,
        diseasesFocusList: prostate_franchiseDiseaseFocus,
      ),
    ];
    return listTotalLeaderboard;
  }

  static getMeetingsAndActivites(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=SELECT%20Master_Engagement__r.Brand_Master__r.Name,Master_Engagement__r.Brand_Master__r.Color__c,%20Attendee_Type__c,%20Master_Engagement__r.Engagement_Date__c,%20Master_Engagement__r.Name,%20Master_Engagement__r.Start_Date_Time__c,%20Id,%20KOLAccount__r.Name,%20Master_Engagement__r.Id%20FROM%20KOL_Engagement__c%20WHERE%20Master_Engagement__r.KOL_Profile_Portal__r.Name%20=%20%27Janssen%20KOL%20Portal%27%20AND%20CALENDAR_YEAR(Master_Engagement__r.Engagement_Date__c)%20=%202022%20AND%20(Master_Engagement__r.Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)%20ORDER%20BY%20Master_Engagement__r.Start_Date_Time__c%20desc";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getMeetingsAndActivites ${response.body}");
    final _currentDate = DateTime.now();
    String _dateNow = DateFormat("yyyy-MM-dd").format(_currentDate);
    MeetingsActivites _meetingsActivites =
        MeetingsActivites.fromJson(jsonDecode(response.body));
    List<MeetingsActivitesRecords> lisOfOneonOneMeeting =
        _meetingsActivites.records!.where((element) {
      return element.masterEngagementR!.name == "1:1 Meetings";
    }).toList();
    List<MeetingsActivitesRecords> lisOfActivities =
        _meetingsActivites.records!.where((element) {
      return element.masterEngagementR!.name != "1:1 Meetings";
    }).toList();
    List<MeetingsActivitesRecords> _listUpcomingMeetings =
        lisOfOneonOneMeeting.where((element) {
      return DateTime.parse(element.masterEngagementR!.engagementDateC ?? "")
          .isAfter(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitesRecords> _listPreviusMeetings =
        lisOfOneonOneMeeting.where((element) {
      return DateTime.parse(element.masterEngagementR!.engagementDateC ?? "")
          .isBefore(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitesRecords> _listUpcomingActivities =
        lisOfActivities.where((element) {
      return DateTime.parse(element.masterEngagementR!.engagementDateC ?? "")
          .isAfter(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitesRecords> _listPreviusActivites =
        lisOfActivities.where((element) {
      return DateTime.parse(element.masterEngagementR!.engagementDateC ?? "")
          .isBefore(DateTime.parse(_dateNow));
    }).toList();
    List<MeetingsActivitiesData> _meetingsActivitiesData = [
      MeetingsActivitiesData(
          id: 1,
          upcomingList: _listUpcomingMeetings,
          previousList: _listPreviusMeetings),
      MeetingsActivitiesData(
          id: 1,
          upcomingList: _listUpcomingActivities,
          previousList: _listPreviusActivites),
    ];

    return _meetingsActivitiesData;
  }

  static getPieChartData(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20KOL_Brand__r.Advocacy_Score_1__c,%20count(id)%20from%20KOL_Engagement__c%20where%20Master_Engagement__r.KOL_Profile_Portal__r.Name%20=%20%27Janssen%20KOL%20Portal%27%20and%20(Master_Engagement__r.Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)%20group%20by%20KOL_Brand__r.Advocacy_Score_1__c%20order%20by%20KOL_Brand__r.Advocacy_Score_1__c%20asc";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getProstateFranchiseActivity ${response.body}");
    PieChartData _pieChartData =
        PieChartData.fromJson(jsonDecode(response.body));

    return _pieChartData;
  }

  static getRectangleChartData(BuildContext context) async {
    String url =
        "https://evolutionmedcom--fullcopy.sandbox.my.salesforce.com/services/data/v42.0/query?q=Select%20Master_Engagement__r.Type__c,%20KOL_Brand__r.Advocacy_Score_1__c,%20count(id)%20from%20KOL_Engagement__c%20where%20Master_Engagement__r.KOL_Profile_Portal__r.Name%20=%20%27Janssen%20KOL%20Portal%27%20and%20(Master_Engagement__r.Brand_Master__r.Name%20=%20%27Leukemia-Lymphoma%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27MM%20Portfolio%27%20or%20Master_Engagement__r.Brand_Master__r.Name%20=%20%27Prostate%20Franchise%27%20)%20group%20by%20Master_Engagement__r.Type__c,%20KOL_Brand__r.Advocacy_Score_1__c%20order%20by%20KOL_Brand__r.Advocacy_Score_1__c%20asc";
    var response = await http.get(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
        // 'Accept': 'application/json',
        'Authorization':
            'Bearer 00D23000000FGah!AQUAQB17Gky5jJiTYtFD836d_gr4arf2JmT75P54XzQf8osy28aiFU8UdZ8CkGXNizFCUTPZ4.mE9sLG.ZcZUK9lRXbpAyb_'
      },
    );
    // print("getProstateFranchiseActivity ${response.body}");
    PieChartData __rectangleChartData =
        PieChartData.fromJson(jsonDecode(response.body));
    List<PieChartRecords> _oneMeetingListData = __rectangleChartData.records!
        .where((element) => element.typeC == "1:1 Meetings")
        .toList();
    List<PieChartRecords> _UnscoredMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Unscored")
        .toList();
    List<PieChartRecords> _DetractorMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveMeetingData = _oneMeetingListData
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _advisoryListData = __rectangleChartData.records!
        .where((element) => element.typeC == "Advisory Board")
        .toList();
    List<PieChartRecords> _UnscoredAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Unscored")
        .toList();
    List<PieChartRecords> _DetractorAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveAdvisoryData = _advisoryListData
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _consultingData = __rectangleChartData.records!
        .where((element) => element.typeC == "Consulting")
        .toList();
    List<PieChartRecords> _UnscoredConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Unscored")
        .toList();
    List<PieChartRecords> _DetractorConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Neutral")
        .toList();
    List<PieChartRecords> _PassiveConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveConsultingData = _consultingData
        .where((element) => element.advocacyScore1C == "Proactive Advocate")
        .toList();
    List<PieChartRecords> _ExecutiveData = __rectangleChartData.records!
        .where((element) => element.typeC == "Executive Encounter")
        .toList();
    List<PieChartRecords> _UnscoredExecutiveData =
        _ExecutiveData.where((element) => element.advocacyScore1C == "Unscored")
            .toList();
    List<PieChartRecords> _DetractorExecutiveData = _ExecutiveData.where(
        (element) => element.advocacyScore1C == "Detractor").toList();
    List<PieChartRecords> _NeutralExecutiveData =
        _ExecutiveData.where((element) => element.advocacyScore1C == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveExecutiveData = _ExecutiveData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveExecutiveData = _ExecutiveData.where(
        (element) => element.advocacyScore1C == "Proactive Advocate").toList();

    List<PieChartRecords> _InstitutionalData = __rectangleChartData.records!
        .where((element) => element.typeC == "Institutional Programs")
        .toList();
    List<PieChartRecords> _UnscoredInstitutionalData = _InstitutionalData.where(
        (element) => element.advocacyScore1C == "Unscored").toList();
    List<PieChartRecords> _DetractorInstitutionalData =
        _InstitutionalData.where(
            (element) => element.advocacyScore1C == "Detractor").toList();
    List<PieChartRecords> _NeutralInstitutionalData = _InstitutionalData.where(
        (element) => element.advocacyScore1C == "Neutral").toList();
    List<PieChartRecords> _PassiveInstitutionalData = _InstitutionalData.where(
        (element) => element.advocacyScore1C == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveInstitutionalData =
        _InstitutionalData.where(
                (element) => element.advocacyScore1C == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _SponsorshipData = __rectangleChartData.records!
        .where((element) => element.typeC == "Sponsorship / 3rd Party Events")
        .toList();
    List<PieChartRecords> _UnscoredSponsorshipData =
        _SponsorshipData.where((element) => element.typeC == "Unscored")
            .toList();
    List<PieChartRecords> _DetractorSponsorshipData =
        _SponsorshipData.where((element) => element.typeC == "Detractor")
            .toList();
    List<PieChartRecords> _NeutralSponsorshipData =
        _SponsorshipData.where((element) => element.typeC == "Neutral")
            .toList();
    List<PieChartRecords> _PassiveSponsorshipData = _SponsorshipData.where(
        (element) => element.typeC == "Passive Supporter").toList();
    List<PieChartRecords> _ProactiveSponsorshipData = _SponsorshipData.where(
        (element) => element.typeC == "Proactive Advocate").toList();

    List<PieChartRecords> _InternalData = __rectangleChartData.records!
        .where((element) => element.typeC == "Internal Event")
        .toList();
    List<PieChartRecords> _UnscoredInternalData =
        _InternalData.where((element) => element.typeC == "Unscored").toList();
    List<PieChartRecords> _DetractorInternalData =
        _InternalData.where((element) => element.typeC == "Detractor").toList();
    List<PieChartRecords> _NeutralInternalData =
        _InternalData.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassiveInternalData =
        _InternalData.where((element) => element.typeC == "Passive Supporter")
            .toList();
    List<PieChartRecords> _ProactiveInternalData =
        _InternalData.where((element) => element.typeC == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _SteeringData = __rectangleChartData.records!
        .where((element) => element.typeC == "Steering Committee")
        .toList();
    List<PieChartRecords> _UnscoredSteeringData =
        _SteeringData.where((element) => element.typeC == "Unscored").toList();
    List<PieChartRecords> _DetractorSteeringData =
        _SteeringData.where((element) => element.typeC == "Detractor").toList();
    List<PieChartRecords> _NeutralSteeringData =
        _SteeringData.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassiveSteeringData =
        _SteeringData.where((element) => element.typeC == "Passive Supporter")
            .toList();
    List<PieChartRecords> _ProactiveSteeringData =
        _SteeringData.where((element) => element.typeC == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _ProductData = __rectangleChartData.records!
        .where((element) => element.typeC == "Product Theater/Symposium")
        .toList();
    List<PieChartRecords> _UnscoredProductData =
        _ProductData.where((element) => element.typeC == "Unscored").toList();
    List<PieChartRecords> _DetractorProductData =
        _ProductData.where((element) => element.typeC == "Detractor").toList();
    List<PieChartRecords> _NeutralProductData =
        _ProductData.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassiveProductData =
        _ProductData.where((element) => element.typeC == "Passive Supporter")
            .toList();
    List<PieChartRecords> _ProactiveProductData =
        _ProductData.where((element) => element.typeC == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _OtherData = __rectangleChartData.records!
        .where((element) => element.typeC == "Other")
        .toList();
    List<PieChartRecords> _UnscoredOtherData =
        _OtherData.where((element) => element.typeC == "Unscored").toList();
    List<PieChartRecords> _DetractorOtherData =
        _OtherData.where((element) => element.typeC == "Detractor").toList();
    List<PieChartRecords> _NeutralOtherData =
        _OtherData.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassiveOtherData =
        _OtherData.where((element) => element.typeC == "Passive Supporter")
            .toList();
    List<PieChartRecords> _ProactiveOtherData =
        _OtherData.where((element) => element.typeC == "Proactive Advocate")
            .toList();

    List<PieChartRecords> _speakerList = __rectangleChartData.records!
        .where((element) => element.typeC == "Speaker Training")
        .toList();
    List<PieChartRecords> _UnscoredSpeakerData =
        _speakerList.where((element) => element.typeC == "Unscored").toList();
    List<PieChartRecords> _DetractorSpeakerData =
        _speakerList.where((element) => element.typeC == "Detractor").toList();
    List<PieChartRecords> _NeutralSpeakerData =
        _speakerList.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassiveSpeakerData = _speakerList
        .where((element) => element.typeC == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactiveSpeakerData = _speakerList
        .where((element) => element.typeC == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _mslRoundtableList = __rectangleChartData.records!
        .where((element) => element.typeC == "MSL Roundtable")
        .toList();
    List<PieChartRecords> _UnscoredmslRoundtableData = _mslRoundtableList
        .where((element) => element.typeC == "Unscored")
        .toList();
    List<PieChartRecords> _DetractormslRoundtableData = _mslRoundtableList
        .where((element) => element.typeC == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralmslRoundtableData = _mslRoundtableList
        .where((element) => element.typeC == "Neutral")
        .toList();
    List<PieChartRecords> _PassivemslRoundtableData = _mslRoundtableList
        .where((element) => element.typeC == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactivemslRoundtableData = _mslRoundtableList
        .where((element) => element.typeC == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _mediaEventList = __rectangleChartData.records!
        .where((element) => element.typeC == "Media Event")
        .toList();
    List<PieChartRecords> _UnscoredmediaEventData = _mediaEventList
        .where((element) => element.typeC == "Unscored")
        .toList();
    List<PieChartRecords> _DetractormediaEventData = _mediaEventList
        .where((element) => element.typeC == "Detractor")
        .toList();
    List<PieChartRecords> _NeutralmediaEventData =
        _mediaEventList.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassivemediaEventData = _mediaEventList
        .where((element) => element.typeC == "Passive Supporter")
        .toList();
    List<PieChartRecords> _ProactivemediaEventData = _mediaEventList
        .where((element) => element.typeC == "Proactive Advocate")
        .toList();

    List<PieChartRecords> _CMEList = __rectangleChartData.records!
        .where((element) => element.typeC == "CME")
        .toList();
    List<PieChartRecords> _UnscoredCMEData =
        _CMEList.where((element) => element.typeC == "Unscored").toList();
    List<PieChartRecords> _DetractorCMEData =
        _CMEList.where((element) => element.typeC == "Detractor").toList();
    List<PieChartRecords> _NeutralCMEData =
        _CMEList.where((element) => element.typeC == "Neutral").toList();
    List<PieChartRecords> _PassiveCMEData =
        _CMEList.where((element) => element.typeC == "Passive Supporter")
            .toList();
    List<PieChartRecords> _ProactiveCMEData =
        _CMEList.where((element) => element.typeC == "Proactive Advocate")
            .toList();

    List<RectangleChartDataMap>? __rectangleChartDataMap = [
      RectangleChartDataMap(
        id: "1",
        name: "1:1 Meetings",
        listOfRectangularChartData: _oneMeetingListData,
        neutralList: _NeutralMeetingData,
        passiveList: _PassiveMeetingData,
        unscoredList: _UnscoredMeetingData,
        detractorList: _DetractorMeetingData,
        proactiveList: _ProactiveMeetingData,
      ),
      RectangleChartDataMap(
        id: "2",
        name: "Executive Encounter",
        listOfRectangularChartData: _ExecutiveData,
        neutralList: _NeutralExecutiveData,
        passiveList: _PassiveExecutiveData,
        unscoredList: _UnscoredExecutiveData,
        detractorList: _DetractorExecutiveData,
        proactiveList: _ProactiveExecutiveData,
      ),
      RectangleChartDataMap(
        id: "3",
        name: "Institutional Programs",
        listOfRectangularChartData: _InstitutionalData,
        neutralList: _NeutralInstitutionalData,
        passiveList: _PassiveInstitutionalData,
        unscoredList: _UnscoredInstitutionalData,
        detractorList: _DetractorInstitutionalData,
        proactiveList: _ProactiveInstitutionalData,
      ),
      RectangleChartDataMap(
        id: "4",
        name: "Advisory Board",
        listOfRectangularChartData: _advisoryListData,
        neutralList: _NeutralAdvisoryData,
        passiveList: _PassiveAdvisoryData,
        unscoredList: _UnscoredAdvisoryData,
        detractorList: _DetractorAdvisoryData,
        proactiveList: _ProactiveAdvisoryData,
      ),
      RectangleChartDataMap(
        id: "5",
        name: "Steering Committee",
        listOfRectangularChartData: _SteeringData,
        neutralList: _NeutralSteeringData,
        passiveList: _PassiveSteeringData,
        unscoredList: _UnscoredSteeringData,
        detractorList: _DetractorSteeringData,
        proactiveList: _ProactiveSteeringData,
      ),
      RectangleChartDataMap(
        id: "6",
        name: "MSL Roundtable",
        listOfRectangularChartData: _mslRoundtableList,
        neutralList: _DetractormslRoundtableData,
        passiveList: _PassivemslRoundtableData,
        unscoredList: _UnscoredmslRoundtableData,
        detractorList: _DetractormslRoundtableData,
        proactiveList: _ProactivemslRoundtableData,
      ),
      RectangleChartDataMap(
        id: "7",
        name: "Consulting",
        listOfRectangularChartData: _consultingData,
        neutralList: _NeutralConsultingData,
        passiveList: _PassiveConsultingData,
        unscoredList: _UnscoredConsultingData,
        detractorList: _DetractorConsultingData,
        proactiveList: _ProactiveConsultingData,
      ),
      RectangleChartDataMap(
        id: "8",
        name: "Speaker Training",
        listOfRectangularChartData: _speakerList,
        neutralList: _NeutralSpeakerData,
        passiveList: _PassiveSpeakerData,
        unscoredList: _UnscoredSpeakerData,
        detractorList: _DetractorSpeakerData,
        proactiveList: _ProactiveSpeakerData,
      ),
      RectangleChartDataMap(
        id: "9",
        name: "Internal Event",
        listOfRectangularChartData: _InternalData,
        neutralList: _NeutralInternalData,
        passiveList: _PassiveInternalData,
        unscoredList: _UnscoredInternalData,
        detractorList: _DetractorInternalData,
        proactiveList: _ProactiveInternalData,
      ),
      RectangleChartDataMap(
        id: "10",
        name: "Media Event",
        listOfRectangularChartData: _mediaEventList,
        neutralList: _NeutralmediaEventData,
        passiveList: _PassivemediaEventData,
        unscoredList: _UnscoredmediaEventData,
        detractorList: _DetractormediaEventData,
        proactiveList: _ProactivemediaEventData,
      ),
      RectangleChartDataMap(
        id: "11",
        name: "Product Theater/Symposium",
        listOfRectangularChartData: _ProductData,
        neutralList: _NeutralProductData,
        passiveList: _PassiveProductData,
        unscoredList: _UnscoredProductData,
        detractorList: _DetractorProductData,
        proactiveList: _ProactiveProductData,
      ),
      RectangleChartDataMap(
        id: "12",
        name: "Sponsorship / 3rd Party Events",
        listOfRectangularChartData: _SponsorshipData,
        neutralList: _NeutralSponsorshipData,
        passiveList: _PassiveSponsorshipData,
        unscoredList: _UnscoredSponsorshipData,
        detractorList: _DetractorSponsorshipData,
        proactiveList: _ProactiveSponsorshipData,
      ),
      RectangleChartDataMap(
        id: "13",
        name: "CME",
        listOfRectangularChartData: _CMEList,
        neutralList: _NeutralCMEData,
        passiveList: _PassiveCMEData,
        unscoredList: _UnscoredCMEData,
        detractorList: _DetractorCMEData,
        proactiveList: _ProactiveCMEData,
      ),
      RectangleChartDataMap(
        id: "14",
        name: "Other",
        listOfRectangularChartData: _OtherData,
        neutralList: _NeutralOtherData,
        passiveList: _PassiveOtherData,
        unscoredList: _UnscoredOtherData,
        detractorList: _DetractorOtherData,
        proactiveList: _ProactiveOtherData,
      ),
    ];
    return __rectangleChartDataMap;
  }
}
